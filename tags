!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	src/stdio/__printf.c	31;"	d	file:
ATOMIC_BOOL_LOCK_FREE	src/stdatomic/ATOMIC_BOOL_LOCK_FREE.c	1;"	d	file:
ATOMIC_CHAR32_T_LOCK_FREE	src/stdatomic/ATOMIC_CHAR32_T_LOCK_FREE.c	1;"	d	file:
ATOMIC_CHAR_16_T_LOCK_FREE	src/stdatomic/ATOMIC_CHAR16_T_LOCK_FREE.c	1;"	d	file:
ATOMIC_CHAR_LOCK_FREE	src/stdatomic/ATOMIC_CHAR_LOCK_FREE.c	1;"	d	file:
ATOMIC_INT_LOCK_FREE	src/stdatomic/ATOMIC_INT_LOCK_FREE.c	1;"	d	file:
ATOMIC_LLONG_LOCK_FREE	src/stdatomic/ATOMIC_LLONG_LOCK_FREE.c	1;"	d	file:
ATOMIC_LONG_LOCK_FREE	src/stdatomic/ATOMIC_LONG_LOCK_FREE.c	1;"	d	file:
ATOMIC_POINTER_LOCK_FREE	src/stdatomic/ATOMIC_POINTER_LOCK_FREE.c	1;"	d	file:
ATOMIC_SHORT_LOCK_FREE	src/stdatomic/ATOMIC_SHORT_LOCK_FREE.c	1;"	d	file:
ATOMIC_WCHAR_T_LOCK_FREE	src/stdatomic/ATOMIC_WCHAR_T_LOCK_FREE.c	1;"	d	file:
DEFAULT_LOCALE	src/__main.c	10;"	d	file:
DEFAULT_LOCALE	src/__main.c	8;"	d	file:
LEFT	src/stdio/__printf.c	28;"	d	file:
LINE_MAX	src/grp/getgrent.c	16;"	d	file:
LINE_MAX	src/pwd/getpwent.c	16;"	d	file:
NUMBUFLEN	src/stdio/__printf.c	26;"	d	file:
POSIX_FORCED	src/signal/raise.c	3;"	d	file:
POSIX_FORCED	src/signal/signal.c	3;"	d	file:
POSIX_FORCED	src/stdio/fclose.c	3;"	d	file:
POSIX_FORCED	src/stdio/fflush.c	3;"	d	file:
POSIX_FORCED	src/stdio/freopen.c	3;"	d	file:
POSIX_FORCED	src/stdio/remove.c	3;"	d	file:
POSIX_FORCED	src/stdlib/realloc.c	4;"	d	file:
SA_RESTART	src/signal/signal.c	10;"	d	file:
SA_RESTART	src/signal/signal.c	11;"	d	file:
SIGN	src/stdio/__printf.c	29;"	d	file:
SPACE	src/stdio/__printf.c	30;"	d	file:
TGSOURCE	src/complex/cabs.c	1;"	d	file:
TGSOURCE	src/complex/cacos.c	1;"	d	file:
TGSOURCE	src/complex/cacosh.c	1;"	d	file:
TGSOURCE	src/complex/carg.c	1;"	d	file:
TGSOURCE	src/complex/casin.c	1;"	d	file:
TGSOURCE	src/complex/casinh.c	1;"	d	file:
TGSOURCE	src/complex/catan.c	1;"	d	file:
TGSOURCE	src/complex/catanh.c	1;"	d	file:
TGSOURCE	src/complex/ccos.c	1;"	d	file:
TGSOURCE	src/complex/ccosh.c	1;"	d	file:
TGSOURCE	src/complex/cexp.c	1;"	d	file:
TGSOURCE	src/complex/cimag.c	1;"	d	file:
TGSOURCE	src/complex/clog.c	1;"	d	file:
TGSOURCE	src/complex/conj.c	1;"	d	file:
TGSOURCE	src/complex/cpow.c	1;"	d	file:
TGSOURCE	src/complex/cproj.c	1;"	d	file:
TGSOURCE	src/complex/creal.c	1;"	d	file:
TGSOURCE	src/complex/csin.c	1;"	d	file:
TGSOURCE	src/complex/csinh.c	1;"	d	file:
TGSOURCE	src/complex/csqrt.c	1;"	d	file:
TGSOURCE	src/complex/ctan.c	1;"	d	file:
TGSOURCE	src/complex/ctanh.c	1;"	d	file:
TGSOURCE	src/math/__fpclassify.c	1;"	d	file:
TGSOURCE	src/math/acos.c	1;"	d	file:
TGSOURCE	src/math/acosh.c	1;"	d	file:
TGSOURCE	src/math/asin.c	1;"	d	file:
TGSOURCE	src/math/asinh.c	1;"	d	file:
TGSOURCE	src/math/atan.c	1;"	d	file:
TGSOURCE	src/math/atan2.c	1;"	d	file:
TGSOURCE	src/math/atanh.c	1;"	d	file:
TGSOURCE	src/math/cbrt.c	1;"	d	file:
TGSOURCE	src/math/ceil.c	1;"	d	file:
TGSOURCE	src/math/copysign.c	1;"	d	file:
TGSOURCE	src/math/cos.c	1;"	d	file:
TGSOURCE	src/math/cosh.c	1;"	d	file:
TGSOURCE	src/math/erf.c	1;"	d	file:
TGSOURCE	src/math/erfc.c	1;"	d	file:
TGSOURCE	src/math/exp.c	1;"	d	file:
TGSOURCE	src/math/exp2.c	1;"	d	file:
TGSOURCE	src/math/expm1.c	1;"	d	file:
TGSOURCE	src/math/fabs.c	1;"	d	file:
TGSOURCE	src/math/fdim.c	1;"	d	file:
TGSOURCE	src/math/floor.c	1;"	d	file:
TGSOURCE	src/math/fma.c	1;"	d	file:
TGSOURCE	src/math/fmax.c	1;"	d	file:
TGSOURCE	src/math/fmin.c	1;"	d	file:
TGSOURCE	src/math/fmod.c	1;"	d	file:
TGSOURCE	src/math/frexp.c	1;"	d	file:
TGSOURCE	src/math/hypot.c	1;"	d	file:
TGSOURCE	src/math/ilogb.c	1;"	d	file:
TGSOURCE	src/math/ldexp.c	1;"	d	file:
TGSOURCE	src/math/lgamma.c	1;"	d	file:
TGSOURCE	src/math/llrint.c	1;"	d	file:
TGSOURCE	src/math/llround.c	1;"	d	file:
TGSOURCE	src/math/log.c	1;"	d	file:
TGSOURCE	src/math/log10.c	1;"	d	file:
TGSOURCE	src/math/log1p.c	1;"	d	file:
TGSOURCE	src/math/log2.c	1;"	d	file:
TGSOURCE	src/math/logb.c	1;"	d	file:
TGSOURCE	src/math/lrint.c	1;"	d	file:
TGSOURCE	src/math/lround.c	1;"	d	file:
TGSOURCE	src/math/modf.c	1;"	d	file:
TGSOURCE	src/math/nan.c	1;"	d	file:
TGSOURCE	src/math/nearbyint.c	1;"	d	file:
TGSOURCE	src/math/nextafter.c	1;"	d	file:
TGSOURCE	src/math/nexttoward.c	1;"	d	file:
TGSOURCE	src/math/pow.c	1;"	d	file:
TGSOURCE	src/math/remainder.c	2;"	d	file:
TGSOURCE	src/math/remquo.c	1;"	d	file:
TGSOURCE	src/math/rint.c	1;"	d	file:
TGSOURCE	src/math/round.c	1;"	d	file:
TGSOURCE	src/math/scalbln.c	1;"	d	file:
TGSOURCE	src/math/scalbn.c	1;"	d	file:
TGSOURCE	src/math/sin.c	1;"	d	file:
TGSOURCE	src/math/sinh.c	1;"	d	file:
TGSOURCE	src/math/sqrt.c	1;"	d	file:
TGSOURCE	src/math/tan.c	1;"	d	file:
TGSOURCE	src/math/tanh.c	1;"	d	file:
TGSOURCE	src/math/tgamma.c	1;"	d	file:
TGSOURCE	src/math/trunc.c	1;"	d	file:
UNSIGNED	src/stdio/__printf.c	34;"	d	file:
UPPER	src/stdio/__printf.c	33;"	d	file:
ZERO	src/stdio/__printf.c	32;"	d	file:
_Exit	src/stdlib/_Exit.c	/^_Noreturn void _Exit(int status)$/;"	f
_POSIX_C_SOURCE	src/grp/getgrent.c	2;"	d	file:
_POSIX_C_SOURCE	src/grp/getgrent.c	3;"	d	file:
_POSIX_C_SOURCE	src/pwd/getpwent.c	2;"	d	file:
_POSIX_C_SOURCE	src/pwd/getpwent.c	3;"	d	file:
_POSIX_C_SOURCE	src/stdlib/realloc.c	2;"	d	file:
_POSIX_C_SOURCE	src/stdlib/realloc.c	3;"	d	file:
_POSIX_C_SOURCE	src/unistd/sleep.c	2;"	d	file:
_POSIX_C_SOURCE	src/unistd/sleep.c	3;"	d	file:
_POSIX_SOURCE	src/signal/raise.c	2;"	d	file:
_POSIX_SOURCE	src/signal/signal.c	2;"	d	file:
_POSIX_SOURCE	src/stdio/fclose.c	2;"	d	file:
_POSIX_SOURCE	src/stdio/fflush.c	2;"	d	file:
_POSIX_SOURCE	src/stdio/freopen.c	2;"	d	file:
_POSIX_SOURCE	src/stdio/remove.c	2;"	d	file:
_XOPEN_LEGACY	src/re_comp/re_exec.c	3;"	d	file:
_XOPEN_LEGACY	src/regexp/advance.c	3;"	d	file:
_XOPEN_LEGACY	src/regexp/compile.c	3;"	d	file:
_XOPEN_LEGACY	src/regexp/step.c	3;"	d	file:
_XOPEN_LEGACY	src/stdio/getw.c	3;"	d	file:
_XOPEN_LEGACY	src/stdio/putw.c	3;"	d	file:
_XOPEN_SOURCE	src/sys/stat/mkfifo.c	2;"	d	file:
__LONGEST_STRERR	src/string/strerror.c	5;"	d	file:
__PLATFORM__	src/sys/utsname/uname.c	5;"	d	file:
__append	src/stdio/__printf.c	/^static int __append(char *s, char *argstring, int nout, size_t n)$/;"	f	file:
__assert	src/assert/__assert.c	/^void __assert(const char *expr, const char *file, int line, const char *func)$/;"	f
__errno	src/errno/__errno.c	/^int *__errno(void)$/;"	f
__fpclassify	src/math/__fpclassify.c	/^int TGFN(__fpclassify)(TYPE x)$/;"	f
__ftw	src/ftw/__ftw.c	/^int __ftw(const char *path, int (*fn)(), int fd_limit, int flags)$/;"	f
__get_locale	src/locale/__get_locale.c	/^struct __locale_t * __get_locale(void)$/;"	f
__grp	src/grp/__grp.c	/^struct __grp __grp =$/;"	v	typeref:struct:__grp
__itos	src/stdio/__printf.c	/^static void __itos(char *s, intmax_t n, int flags, int precision, int base)$/;"	f	file:
__load_locale	src/locale/__load_locale.c	/^char * __load_locale(struct __locale_t *loc, int mask, const char *name)$/;"	f
__loc1	src/libgen/__loc1.c	/^char *__loc1;$/;"	v
__main	src/__main.c	/^void __main(int argc, char **argv)$/;"	f
__printf	src/stdio/__printf.c	/^int (__printf)(struct io_options *opt, const char * format, va_list arg)$/;"	f
__pwd	src/pwd/__pwd.c	/^struct __pwd __pwd =$/;"	v	typeref:struct:__pwd
__qsort	src/stdlib/qsort.c	/^static void __qsort(char *base, size_t size, size_t lo, size_t hi, int (*compar)(const void *, const void *))$/;"	f	file:
__scanf	src/stdio/__scanf.c	/^int __scanf(struct io_options *opt, const char * format, va_list arg)$/;"	f
__stack_chk_fail	src/__main.c	/^void __stack_chk_fail(void) {}$/;"	f
__stderr	src/stdio/__stderr.c	/^FILE *__stderr;$/;"	v
__stdin	src/stdio/__stdin.c	/^FILE *__stdin;$/;"	v
__stdio	src/stdio/__stdio.c	/^struct __stdio __stdio = { 0 };$/;"	v	typeref:struct:__stdio
__stdlib	src/stdlib/__stdlib.c	/^struct __stdlib __stdlib;$/;"	v	typeref:struct:__stdlib
__stdout	src/stdio/__stdout.c	/^FILE *__stdout;$/;"	v
__swap	src/stdlib/qsort.c	/^static void __swap(char *base, size_t size, size_t b, size_t c)$/;"	f	file:
__time	src/time/__time.c	/^struct __time __time;$/;"	v	typeref:struct:__time
_exit	src/unistd/_exit.c	/^void _exit(int status)$/;"	f
_longjmp	src/setjmp/_longjmp.c	/^void _longjmp(jmp_buf env, int val)$/;"	f
_setjmp	src/setjmp/_setjmp.c	/^int _setjmp(jmp_buf env)$/;"	f
_tolower	src/ctype/_tolower.c	5;"	d	file:
_toupper	src/ctype/_toupper.c	5;"	d	file:
a64l	src/stdlib/a64l.c	/^long a64l(const char *s)$/;"	f
abort	src/stdlib/abort.c	/^_Noreturn void abort(void)$/;"	f
abort_handler_s	src/stdlib/abort_handler_s.c	/^void abort_handler_s(const char * restrict msg, void * restrict ptr, errno_t error)$/;"	f
abs	src/stdlib/abs.c	/^int abs(int j)$/;"	f
access	src/unistd/access.c	/^int access(const char *path, int amode)$/;"	f
acos	src/math/acos.c	/^TYPE TGFN(acos)(TYPE x)$/;"	f
acosh	src/math/acosh.c	/^TYPE TGFN(acosh)(TYPE x)$/;"	f
actime	src/utime/struct_utimbuf.c	/^	time_t actime;$/;"	m	struct:utimbuf	file:
advance	src/regexp/advance.c	/^int advance(const char *string, const char *expbuf)$/;"	f
aio_buf	src/aio/struct_aiocb.c	/^	volatile void *	aio_buf;$/;"	m	struct:aiocb	file:
aio_cancel	src/aio/aio_cancel.c	/^int aio_cancel(int fildes, struct aiocb *aiocbp)$/;"	f
aio_error	src/aio/aio_error.c	/^int aio_error(const struct aiocb * aiocbp)$/;"	f
aio_fildes	src/aio/struct_aiocb.c	/^	int		aio_fildes;$/;"	m	struct:aiocb	file:
aio_fsync	src/aio/aio_fsync.c	/^int aio_fsync(int op, struct aiocb * aiocbp)$/;"	f
aio_lio_opcode	src/aio/struct_aiocb.c	/^	int		aio_lio_opcode;$/;"	m	struct:aiocb	file:
aio_nbytes	src/aio/struct_aiocb.c	/^	size_t		aio_nbytes;$/;"	m	struct:aiocb	file:
aio_offset	src/aio/struct_aiocb.c	/^	off_t		aio_offset;$/;"	m	struct:aiocb	file:
aio_read	src/aio/aio_read.c	/^int aio_read(struct aiocb * aiocbp)$/;"	f
aio_reqprio	src/aio/struct_aiocb.c	/^	int		aio_reqprio;$/;"	m	struct:aiocb	file:
aio_return	src/aio/aio_return.c	/^ssize_t aio_return(struct aiocb *aiocbp)$/;"	f
aio_sigevent	src/aio/struct_aiocb.c	/^	struct sigevent	aio_sigevent;$/;"	m	struct:aiocb	typeref:struct:aiocb::sigevent	file:
aio_suspend	src/aio/aio_suspend.c	/^int aio_suspend(const struct aiocb * const list[], int nent, const struct timespec * timeout)$/;"	f
aio_write	src/aio/aio_write.c	/^int aio_write(struct aiocb * aiocbp)$/;"	f
aiocb	src/aio/struct_aiocb.c	/^struct aiocb {$/;"	s	file:
alarm	src/unistd/alarm.c	/^unsigned alarm(unsigned seconds)$/;"	f
aligned_alloc	src/stdlib/aligned_alloc.c	/^void *aligned_alloc(size_t alignment, size_t size)$/;"	f
asctime	src/time/asctime.c	/^char * asctime(const struct tm * timeptr)$/;"	f
asctime_s	src/time/asctime_s.c	/^errno_t asctime_s(char *s, rsize_t maxsize, const struct tm * timeptr)$/;"	f
asin	src/math/asin.c	/^TYPE TGFN(asin)(TYPE x)$/;"	f
asinh	src/math/asinh.c	/^TYPE TGFN(asinh)(TYPE x)$/;"	f
at_quick_exit	src/stdlib/at_quick_exit.c	/^int at_quick_exit(void (*func)(void))$/;"	f
atan	src/math/atan.c	/^TYPE TGFN(atan)(TYPE x)$/;"	f
atan2	src/math/atan2.c	/^TYPE TGFN(atan2)(TYPE y, TYPE x)$/;"	f
atanh	src/math/atanh.c	/^TYPE TGFN(atanh)(TYPE x)$/;"	f
atexit	src/stdlib/atexit.c	/^int atexit(void (*func)(void))$/;"	f
atof	src/stdlib/atof.c	/^double atof(const char * nptr)$/;"	f
atoi	src/stdlib/atoi.c	/^int atoi(const char * nptr)$/;"	f
atol	src/stdlib/atol.c	/^long int atol(const char * nptr)$/;"	f
atoll	src/stdlib/atoll.c	/^long long int atoll(const char *nptr)$/;"	f
atomic_bool	src/stdatomic/atomic_bool.c	/^typedef _Atomic _Bool atomic_bool;$/;"	t	file:
atomic_char	src/stdatomic/atomic_char.c	/^typedef _Atomic char atomic_char;$/;"	t	file:
atomic_char16_t	src/stdatomic/atomic_char16_t.c	/^typedef _Atomic char16_t atomic_char16_t;$/;"	t	file:
atomic_char32_t	src/stdatomic/atomic_char32_t.c	/^typedef _Atomic char32_t atomic_char32_t;$/;"	t	file:
atomic_compare_exchange_strong	src/stdatomic/atomic_compare_exchange_strong.c	/^_Bool atomic_compare_exchange_strong(volatile __TYPE *object, __BASE *expected, __BASE desired)$/;"	f
atomic_compare_exchange_strong_explicit	src/stdatomic/atomic_compare_exchange_strong_explicit.c	/^_Bool atomic_compare_exchange_strong_explicit(volatile __TYPE *object, __BASE *expected, __BASE desired, memory_order failure)$/;"	f
atomic_compare_exchange_weak	src/stdatomic/atomic_compare_exchange_weak.c	/^_Bool atomic_compare_exchange_weak(volatile __TYPE *object, __BASE *expected, __BASE desired)$/;"	f
atomic_compare_exchange_weak_explicit	src/stdatomic/atomic_compare_exchange_weak_explicit.c	/^_Bool atomic_compare_exchange_weak_explicit(volatile __TYPE *object, __BASE *expected, __BASE desired, memory_order failure)$/;"	f
atomic_exchange	src/stdatomic/atomic_exchange.c	/^__BASE atomic_exchange(volatile __TYPE *object, __BASE desired)$/;"	f
atomic_exchange_explicit	src/stdatomic/atomic_exchange_explicit.c	/^__BASE atomic_exchange_explicit(volatile __TYPE *object, __BASE desired, memory_order order)$/;"	f
atomic_flag	src/stdatomic/atomic_flag.c	/^	atomic_flag;$/;"	t	file:
atomic_flag_clear	src/stdatomic/atomic_flag_clear.c	/^void atomic_flag_clear(volatile atomic_flag *object)$/;"	f
atomic_flag_clear_explicit	src/stdatomic/atomic_flag_clear_explicit.c	/^void atomic_flag_clear_explicit(volatile atomic_flag *object, memory_order order)$/;"	f
atomic_flag_test_and_set	src/stdatomic/atomic_flag_test_and_set.c	/^_Bool atomic_flag_test_and_set(volatile atomic_flag *object)$/;"	f
atomic_flag_test_and_set_explicit	src/stdatomic/atomic_flag_test_and_set_explicit.c	/^_Bool atomic_flag_test_and_set_explicit(volatile atomic_flag *object, memory_order order)$/;"	f
atomic_init	src/stdatomic/atomic_init.c	/^void atomic_init(volatile __TYPE *obj, __BASE value)$/;"	f
atomic_int	src/stdatomic/atomic_int.c	/^typedef _Atomic int atomic_int;$/;"	t	file:
atomic_int_fast16_t	src/stdatomic/atomic_int_fast16_t.c	/^typedef _Atomic int_fast16_t atomic_int_fast16_t;$/;"	t	file:
atomic_int_fast32_t	src/stdatomic/atomic_int_fast32_t.c	/^typedef _Atomic int_fast32_t atomic_int_fast32_t;$/;"	t	file:
atomic_int_fast64_t	src/stdatomic/atomic_int_fast64_t.c	/^typedef _Atomic int_fast64_t atomic_int_fast64_t;$/;"	t	file:
atomic_int_fast8_t	src/stdatomic/atomic_int_fast8_t.c	/^typedef _Atomic int_fast8_t atomic_int_fast8_t;$/;"	t	file:
atomic_int_least16_t	src/stdatomic/atomic_int_least16_t.c	/^typedef _Atomic int_least16_t atomic_int_least16_t;$/;"	t	file:
atomic_int_least32_t	src/stdatomic/atomic_int_least32_t.c	/^typedef _Atomic int_least32_t atomic_int_least32_t;$/;"	t	file:
atomic_int_least64_t	src/stdatomic/atomic_int_least64_t.c	/^typedef _Atomic int_least64_t atomic_int_least64_t;$/;"	t	file:
atomic_int_least8_t	src/stdatomic/atomic_int_least8_t.c	/^typedef _Atomic int_least8_t atomic_int_least8_t;$/;"	t	file:
atomic_intmax_t	src/stdatomic/atomic_intmax_t.c	/^typedef _Atomic intmax_t atomic_intmax_t;$/;"	t	file:
atomic_intptr_t	src/stdatomic/atomic_intptr_t.c	/^typedef _Atomic intptr_t atomic_intptr_t;$/;"	t	file:
atomic_is_lock_free	src/stdatomic/atomic_is_lock_free.c	/^_Bool atomic_is_lock_free(const volatile __TYPE *obj)$/;"	f
atomic_llong	src/stdatomic/atomic_llong.c	/^typedef _Atomic llong atomic_llong;$/;"	t	file:
atomic_load_explicit	src/stdatomic/atomic_load_explicit.c	/^__BASE atomic_load_explicit(const volatile __TYPE *object, memory_order order)$/;"	f
atomic_long	src/stdatomic/atomic_long.c	/^typedef _Atomic long atomic_long;$/;"	t	file:
atomic_ptrdiff_t	src/stdatomic/atomic_ptrdiff_t.c	/^typedef _Atomic ptrdiff_t atomic_ptrdiff_t;$/;"	t	file:
atomic_schar	src/stdatomic/atomic_schar.c	/^typedef _Atomic signed char atomic_schar;$/;"	t	file:
atomic_short	src/stdatomic/atomic_short.c	/^typedef _Atomic short atomic_short;$/;"	t	file:
atomic_signal_fence	src/stdatomic/atomic_signal_fence.c	/^void atomic_signal_fence(memory_order order)$/;"	f
atomic_size_t	src/stdatomic/atomic_size_t.c	/^typedef _Atomic size_t atomic_size_t;$/;"	t	file:
atomic_store	src/stdatomic/atomic_load.c	/^__BASE atomic_store(const volatile __TYPE *object)$/;"	f
atomic_store	src/stdatomic/atomic_store.c	/^void atomic_store(volatile __TYPE *object, __BASE desired)$/;"	f
atomic_store_explicit	src/stdatomic/atomic_store_explicit.c	/^void atomic_store_explicit(volatile __TYPE *object, __BASE desired, memory_order order)$/;"	f
atomic_thread_fence	src/stdatomic/atomic_thread_fence.c	/^void atomic_thread_fence(memory_order order)$/;"	f
atomic_uchar	src/stdatomic/atomic_uchar.c	/^typedef _Atomic unsigned char atomic_uchar;$/;"	t	file:
atomic_uint	src/stdatomic/atomic_uint.c	/^typedef _Atomic unsigned int atomic_uint;$/;"	t	file:
atomic_uint_fast16_t	src/stdatomic/atomic_uint_fast16_t.c	/^typedef _Atomic uint_fast16_t atomic_uint_fast16_t;$/;"	t	file:
atomic_uint_fast32_t	src/stdatomic/atomic_uint_fast32_t.c	/^typedef _Atomic uint_fast32_t atomic_uint_fast32_t;$/;"	t	file:
atomic_uint_fast64_t	src/stdatomic/atomic_uint_fast64_t.c	/^typedef _Atomic uint_fast64_t atomic_uint_fast64_t;$/;"	t	file:
atomic_uint_fast8_t	src/stdatomic/atomic_uint_fast8_t.c	/^typedef _Atomic uint_fast8_t atomic_uint_fast8_t;$/;"	t	file:
atomic_uint_least16_t	src/stdatomic/atomic_uint_least16_t.c	/^typedef _Atomic uint_least16_t atomic_uint_least16_t;$/;"	t	file:
atomic_uint_least32_t	src/stdatomic/atomic_uint_least32_t.c	/^typedef _Atomic uint_least32_t atomic_uint_least32_t;$/;"	t	file:
atomic_uint_least64_t	src/stdatomic/atomic_uint_least64_t.c	/^typedef _Atomic uint_least64_t atomic_uint_least64_t;$/;"	t	file:
atomic_uint_least8_t	src/stdatomic/atomic_uint_least8_t.c	/^typedef _Atomic uint_least8_t atomic_uint_least8_t;$/;"	t	file:
atomic_uintmax_t	src/stdatomic/atomic_uintmax_t.c	/^typedef _Atomic uintmax_t atomic_uintmax_t;$/;"	t	file:
atomic_uintptr_t	src/stdatomic/atomic_uintptr_t.c	/^typedef _Atomic uintptr_t atomic_uintptr_t;$/;"	t	file:
atomic_ullong	src/stdatomic/atomic_ullong.c	/^typedef _Atomic unsigned long long atomic_ullong;$/;"	t	file:
atomic_ulong	src/stdatomic/atomic_ulong.c	/^typedef _Atomic unsigned long atomic_ulong;$/;"	t	file:
atomic_ushort	src/stdatomic/atomic_ushort.c	/^typedef _Atomic unsigned short atomic_ushort;$/;"	t	file:
atomic_wchar_t	src/stdatomic/atomic_wchar_t.c	/^typedef _Atomic wchar_t atomic_wchar_t;$/;"	t	file:
basename	src/libgen/basename.c	/^char * basename(char * path)$/;"	f
bcmp	src/strings/bcmp.c	/^int bcmp(const void *s1, const void *s2, size_t n)$/;"	f
bcopy	src/strings/bcopy.c	/^int bcopy(const void *s1, void *s2, size_t n)$/;"	f
brk	src/unistd/brk.c	/^int brk(void *addr)$/;"	f
bsd_signal	src/signal/bsd_signal.c	/^void (*bsd_signal(int sig, void (*func)(int)))(int)$/;"	f
bsearch	src/stdlib/bsearch.c	/^void * bsearch(const void * key, const void * base, size_t nmemb, size_t size, int (*compar)(const void *, const void*))$/;"	f
bsearch_s	src/stdlib/bsearch_s.c	/^void *bsearch_s(const void * key, const void * base, rsize_t nmemb, rsize_t size, int (*compar)(const void *x, const void *y, void * context), void *context)$/;"	f
btowc	src/wchar/btowc.c	/^wint_t btowc(int c)$/;"	f
bzero	src/strings/bzero.c	/^void bzero(void* s, size_t n)$/;"	f
c16rtomb	src/uchar/c16rtomb.c	/^size_t c16rtomb(char * restrict s, char16_t c16, mbstate_t * restrict ps)$/;"	f
c32rtomb	src/uchar/c32rtomb.c	/^size_t c32rtomb(char * restrict s, char32_t c32, mbstate_t * restrict ps)$/;"	f
cabs	src/complex/cabs.c	/^TYPE TGFN(cabs)(TYPE complex z)$/;"	f
cacos	src/complex/cacos.c	/^TYPE complex TGFN(cacos)(TYPE complex z)$/;"	f
cacosh	src/complex/cacosh.c	/^TYPE complex TGFN(cacosh)(TYPE complex z)$/;"	f
call_once	src/threads/call_once.c	/^void call_once(once_flag *flag, void (*func)(void))$/;"	f
calloc	src/stdlib/calloc.c	/^void * calloc(size_t nmemb, size_t size)$/;"	f
carg	src/complex/carg.c	/^TYPE TGFN(carg)(TYPE complex z)$/;"	f
casin	src/complex/casin.c	/^TYPE complex TGFN(casin)(TYPE complex z)$/;"	f
casinh	src/complex/casinh.c	/^TYPE complex TGFN(casinh)(TYPE complex z)$/;"	f
catan	src/complex/catan.c	/^TYPE complex TGFN(catan)(TYPE complex z)$/;"	f
catanh	src/complex/catanh.c	/^TYPE complex TGFN(catanh)(TYPE complex z)$/;"	f
catclose	src/nl_types/catclose.c	/^int catclose(nl_catd catd)$/;"	f
catgets	src/nl_types/catgets.c	/^char * catgets(nl_catd catd, int set_id, int msg_id, const char * s)$/;"	f
catopen	src/nl_types/catopen.c	/^nl_catd catopen(const char* name, int oflag)$/;"	f
cbrt	src/math/cbrt.c	/^TYPE TGFN(cbrt)(TYPE x)$/;"	f
ccos	src/complex/ccos.c	/^TYPE complex TGFN(ccos)(TYPE complex z)$/;"	f
ccosh	src/complex/ccosh.c	/^TYPE complex TGFN(ccosh)(TYPE complex z)$/;"	f
ceil	src/math/ceil.c	/^TYPE TGFN(ceil)(TYPE x)$/;"	f
cexp	src/complex/cexp.c	/^TYPE complex TGFN(cexp)(TYPE complex z)$/;"	f
cfgetispeed	src/termios/cfgetispeed.c	/^speed_t cfgetispeed(const struct termios *termios_p)$/;"	f
cfgetospeed	src/termios/cfgetospeed.c	/^speed_t cfgetospeed(const struct termios *termios_p)$/;"	f
cfsetispeed	src/termios/cfsetispeed.c	/^int cfsetispeed(struct termios *termios_p, speed_t speed)$/;"	f
cfsetospeed	src/termios/cfsetospeed.c	/^int cfsetospeed(struct termios *termios_p, speed_t speed)$/;"	f
chdir	src/unistd/chdir.c	/^int chdir(const char *path)$/;"	f
chmod	src/sys/stat/chmod.c	/^int chmod(const char *path, mode_t mode)$/;"	f
chown	src/unistd/chown.c	/^int chown(const char *path, uid_t owner, gid_t group)$/;"	f
chroot	src/unistd/chroot.c	/^int chroot(const char *path)$/;"	f
cimag	src/complex/cimag.c	/^TYPE TGFN(cimag)(TYPE complex z)$/;"	f
clearerr	src/stdio/clearerr.c	/^void clearerr(FILE * stream)$/;"	f
clock	src/time/clock.c	/^clock_t clock(void)$/;"	f
clock_getres	src/time/clock_getres.c	/^int clock_getres(clockid_t clock_id, struct timespec *res)$/;"	f
clock_gettime	src/time/clock_gettime.c	/^int clock_gettime(clockid_t clock_id, struct timespec *tp)$/;"	f
clock_settime	src/time/clock_settime.c	/^int clock_settime(clockid_t clock_id, const struct timespec *tp)$/;"	f
clog	src/complex/clog.c	/^TYPE complex TGFN(clog)(TYPE complex z)$/;"	f
close	src/stdio/fclose.c	15;"	d	file:
close	src/unistd/close.c	/^int close(int fildes)$/;"	f
closedir	src/dirent/closedir.c	/^int closedir(DIR *dirp)$/;"	f
closelog	src/syslog/closelog.c	/^void closelog(void)$/;"	f
cnd_broadcast	src/threads/cnd_broadcast.c	/^int cnd_broadcast(cnd_t *cond)$/;"	f
cnd_destroy	src/threads/cnd_destroy.c	/^void cnd_destroy(cnd_t *cond)$/;"	f
cnd_init	src/threads/cnd_init.c	/^int cnd_init(cnd_t *cond)$/;"	f
cnd_signal	src/threads/cnd_signal.c	/^int cnd_signal(cnd_t *cond)$/;"	f
cnd_timedwait	src/threads/cnd_timedwait.c	/^int cnd_timedwait(cnd_t *restrict cond, mtx_t *restrict mtx, const struct timespec *restrict ts)$/;"	f
cnd_wait	src/threads/cnd_wait.c	/^int cnd_wait(cnd_t *cond, mtx_t *mtx)$/;"	f
compile	src/regexp/compile.c	/^char *compile(char *instring, char *expbuf, const char *endbuf, int eof)$/;"	f
confstr	src/unistd/confstr.c	/^size_t confstr(int name, char *buf, size_t len)$/;"	f
conj	src/complex/conj.c	/^TYPE complex TGFN(conj)(TYPE complex z)$/;"	f
copysign	src/math/copysign.c	/^TYPE TGFN(copysign)(TYPE x, TYPE y)$/;"	f
copysign	src/math/copysign.c	5;"	d	file:
cos	src/math/cos.c	/^TYPE TGFN(cos)(TYPE x)$/;"	f
cosh	src/math/cosh.c	/^TYPE TGFN(cosh)(TYPE x)$/;"	f
cpow	src/complex/cpow.c	/^TYPE complex TGFN(cpow)(TYPE complex x, TYPE complex y)$/;"	f
cproj	src/complex/cproj.c	/^TYPE complex TGFN(cproj)(TYPE complex z)$/;"	f
creal	src/complex/creal.c	/^TYPE TGFN(creal)(TYPE complex z)$/;"	f
creat	src/fcntl/creat.c	/^int creat(const char *path, mode_t mode)$/;"	f
crypt	src/unistd/crypt.c	/^char * crypt( const char *key, const char *salt)$/;"	f
csin	src/complex/csin.c	/^TYPE complex TGFN(csin)(TYPE complex z)$/;"	f
csinh	src/complex/csinh.c	/^TYPE complex TGFN(csinh)(TYPE complex z)$/;"	f
csqrt	src/complex/csqrt.c	/^TYPE complex TGFN(csqrt)(TYPE complex z)$/;"	f
ctan	src/complex/ctan.c	/^TYPE complex TGFN(ctan)(TYPE complex z)$/;"	f
ctanh	src/complex/ctanh.c	/^TYPE complex TGFN(ctanh)(TYPE complex z)$/;"	f
ctermid	src/unistd/ctermid.c	/^char * ctermid(char * s)$/;"	f
ctime	src/time/ctime.c	/^char * ctime(const time_t * timer)$/;"	f
ctime_s	src/time/ctime_s.c	/^errno_t ctime_s(char *s, rsize_t maxsize, const time_t *timer)$/;"	f
cuserid	src/unistd/cuserid.c	/^char *cuserid(char *s)$/;"	f
datum	src/ndbm/datum.c	/^} datum;$/;"	t	typeref:struct:__anon1	file:
daylight	src/time/daylight.c	/^int daylight;$/;"	v
dbm_clearerr	src/ndbm/dbm_clearerr.c	/^int dbm_clearerr(DBM * db)$/;"	f
dbm_close	src/ndbm/dbm_close.c	/^void dbm_close(DBM * db)$/;"	f
dbm_delete	src/ndbm/dbm_delete.c	/^int dbm_delete(DBM * db, datum key)$/;"	f
dbm_error	src/ndbm/dbm_error.c	/^int dbm_error(DBM * db)$/;"	f
dbm_fetch	src/ndbm/dbm_fetch.c	/^datum dbm_fetch(DBM * db, datum key)$/;"	f
dbm_firstkey	src/ndbm/dbm_firstkey.c	/^datum dbm_firstkey(DBM * db)$/;"	f
dbm_nextkey	src/ndbm/dbm_nextkey.c	/^datum dbm_nextkey(DBM * db)$/;"	f
dbm_open	src/ndbm/dbm_open.c	/^DBM *dbm_open(const char * file, int open_flags, mode_t file_mode)$/;"	f
dbm_store	src/ndbm/dbm_store.c	/^int dbm_store(DBM * db, datum key, datum content, int store_mode)$/;"	f
difftime	src/time/difftime.c	/^double difftime(time_t time1, time_t time0)$/;"	f
dirname	src/libgen/dirname.c	/^char * dirname(char * path)$/;"	f
div	src/stdlib/div.c	/^div_t div(int numer, int denom)$/;"	f
dlclose	src/dlfcn/dlclose.c	/^int dlclose(void *handle)$/;"	f
dlerror	src/dlfcn/dlerror.c	/^char *dlerror(void)$/;"	f
dlopen	src/dlfcn/dlopen.c	/^void *dlopen(const char *file, int mode)$/;"	f
dlsym	src/dlfcn/dlsym.c	/^void *dlsym(void *restrict handle, const char *restrict name)$/;"	f
dptr	src/ndbm/datum.c	/^	void *	dptr;$/;"	m	struct:__anon1	file:
drand48	src/stdlib/drand48.c	/^double drand48(void)$/;"	f
dsize	src/ndbm/datum.c	/^	size_t	dsize;$/;"	m	struct:__anon1	file:
dup	src/unistd/dup.c	/^int dup(int fildes)$/;"	f
dup2	src/unistd/dup2.c	/^int dup2(int fildes, int fildes2)$/;"	f
ecvt	src/stdlib/ecvt.c	/^char *ecvt(double value, int ndigit, int *decpt, int *sign)$/;"	f
encrypt	src/unistd/encrypt.c	/^void encrypt(char block[64], int edflag)$/;"	f
endgrent	src/grp/endgrent.c	/^void endgrent(void)$/;"	f
endpwent	src/pwd/endpwent.c	/^void endpwent(void)$/;"	f
endutxent	src/utmpx/endutxent.c	/^void endutxent(void)$/;"	f
environ	src/environ.c	/^char **environ;$/;"	v
erand48	src/stdlib/erand48.c	/^double erand48(unsigned short xsubi[3])$/;"	f
erf	src/math/erf.c	/^TYPE TGFN(erf)(TYPE x)$/;"	f
erfc	src/math/erfc.c	/^TYPE TGFN(erfc)(TYPE x)$/;"	f
execl	src/unistd/execl.c	/^int execl(const char *path, const char *arg0, ...  \/*, (char *)0 *\/)$/;"	f
execle	src/unistd/execle.c	/^int execle(const char *path, const char *arg0, ... \/*, (char *)0, char *const envp[] *\/)$/;"	f
execlp	src/unistd/execlp.c	/^int execlp(const char *file, const char *arg0, ...  \/*, (char *0) *\/)$/;"	f
execv	src/unistd/execv.c	/^int execv(const char *path, char *const argv[])$/;"	f
execve	src/unistd/execve.c	/^int execve(const char *path, char *const argv[], char *const envp[])$/;"	f
execvp	src/unistd/execvp.c	/^int execvp(const char *file, char *const argv[])$/;"	f
exit	src/stdlib/exit.c	/^_Noreturn void exit(int status)$/;"	f
exp	src/math/exp.c	/^TYPE TGFN(exp)(TYPE x)$/;"	f
exp2	src/math/exp2.c	/^TYPE TGFN(exp2)(TYPE x)$/;"	f
expm1	src/math/expm1.c	/^TYPE TGFN(expm1)(TYPE x)$/;"	f
fabs	src/math/fabs.c	/^TYPE TGFN(fabs)(TYPE x)$/;"	f
fattach	src/stropts/fattach.c	/^int fattach(int fildes, const char * path )$/;"	f
fchdir	src/unistd/fchdir.c	/^int fchdir(int fildes)$/;"	f
fchmod	src/sys/stat/fchmod.c	/^int fchmod(int fildes, mode_t mode)$/;"	f
fchown	src/unistd/fchown.c	/^int fchown(int fildes, uid_t owner, gid_t group)$/;"	f
fclose	src/stdio/fclose.c	/^int fclose(FILE *stream)$/;"	f
fcntl	src/fcntl/fcntl.c	/^int fcntl(int fildes, int cmd, ...)$/;"	f
fcvt	src/stdlib/fcvt.c	/^char *fcvt(double value, int ndigit, int *decpt, int *sign)$/;"	f
fdatasync	src/unistd/fdatasync.c	/^int fdatasync(int fildes)$/;"	f
fdetach	src/stropts/fdetach.c	/^int fdetach(const char * path )$/;"	f
fdim	src/math/fdim.c	/^TYPE TGFN(fdim)(TYPE x, TYPE y)$/;"	f
fdopen	src/stdio/fdopen.c	/^FILE * fdopen(int fildes, const char * mode)$/;"	f
feclearexcept	src/fenv/feclearexcept.c	/^int feclearexcept(int excepts)$/;"	f
fegetenv	src/fenv/fegetenv.c	/^int fegetenv(fenv_t *envp)$/;"	f
fegetexceptflag	src/fenv/fegetexceptflag.c	/^int fegetexceptflag(fexcept_t *flagp, int excepts)$/;"	f
fegetround	src/fenv/fegetround.c	/^int fegetround(void)$/;"	f
feholdexcept	src/fenv/feholdexcept.c	/^int feholdexcept(fenv_t *envp)$/;"	f
feof	src/stdio/feof.c	/^int feof(FILE *stream)$/;"	f
feraiseexcept	src/fenv/feraiseexcept.c	/^int feraiseexcept(int excepts)$/;"	f
ferror	src/stdio/ferror.c	/^int ferror(FILE *stream)$/;"	f
fesetenv	src/fenv/fesetenv.c	/^int fesetenv(const fenv_t *envp)$/;"	f
fesetexceptflag	src/fenv/fesetexceptflag.c	/^int fesetexceptflag(const fexcept_t *flagp, int excepts)$/;"	f
fesetround	src/fenv/fesetround.c	/^int fesetround(int round)$/;"	f
fetestexcept	src/fenv/fetestexcept.c	/^int fetestexcept(int excepts)$/;"	f
feupdateenv	src/fenv/feupdateenv.c	/^int feupdateenv(const fenv_t *envp)$/;"	f
fflush	src/stdio/fflush.c	/^int fflush(FILE *stream)$/;"	f
ffs	src/strings/ffs.c	/^int ffs(int i)$/;"	f
fgetc	src/stdio/fgetc.c	/^int fgetc(FILE *stream)$/;"	f
fgetpos	src/stdio/fgetpos.c	/^int fgetpos(FILE * restrict stream, fpos_t * restrict pos)$/;"	f
fgets	src/stdio/fgets.c	/^char * fgets(char * restrict s, int n, FILE * restrict stream)$/;"	f
fgetwc	src/wchar/fgetwc.c	/^wint_t fgetwc(FILE * stream)$/;"	f
fgetws	src/wchar/fgetws.c	/^wchar_t * fgetws(wchar_t * restrict s, int n, FILE * restrict stream)$/;"	f
fileno	src/stdio/fileno.c	/^int fileno(FILE * stream)$/;"	f
flockfile	src/stdio/flockfile.c	/^void flockfile(FILE * file)$/;"	f
floor	src/math/floor.c	/^TYPE TGFN(floor)(TYPE x)$/;"	f
fma	src/math/fma.c	/^TYPE TGFN(fma)(TYPE x, TYPE y, TYPE z)$/;"	f
fmax	src/math/fmax.c	/^TYPE TGFN(fmax)(TYPE x, TYPE y)$/;"	f
fmin	src/math/fmin.c	/^TYPE TGFN(fmin)(TYPE x, TYPE y)$/;"	f
fmod	src/math/fmod.c	/^TYPE TGFN(fmod)(TYPE x, TYPE y)$/;"	f
fmtmsg	src/fmtmsg/fmtmsg.c	/^int fmtmsg(long classification, const char * label, int severity, const char * text, const char * action, const char * tag)$/;"	f
fnmatch	src/fnmatch/fnmatch.c	/^int fnmatch(const char * pattern, const char * string, int flags)$/;"	f
fopen	src/stdio/fopen.c	/^FILE * fopen(const char * restrict filename, const char * restrict mode)$/;"	f
fork	src/unistd/fork.c	/^pid_t fork(void)$/;"	f
fpathconf	src/unistd/fpathconf.c	/^long fpathconf(int fildes, int name)$/;"	f
fprintf	src/stdio/fprintf.c	/^int fprintf(FILE * restrict stream, const char * restrict format, ...)$/;"	f
fprintf_s	src/stdio/fprintf_s.c	/^int fprintf_s(FILE * restrict stream, const char * restrict format, ...)$/;"	f
fputc	src/stdio/fputc.c	/^int fputc(int c, FILE *stream)$/;"	f
fputs	src/stdio/fputs.c	/^int fputs(const char * restrict s, FILE * restrict stream)$/;"	f
fputwc	src/wchar/fputwc.c	/^wint_t fputwc(wchar_t c, FILE * stream)$/;"	f
fputws	src/wchar/fputws.c	/^int fputws(const wchar_t * restrict s, FILE * restrict stream)$/;"	f
fread	src/stdio/fread.c	/^size_t fread(void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream)$/;"	f
free	src/stdlib/free.c	/^void free(void * ptr)$/;"	f
freopen	src/stdio/freopen.c	/^FILE * freopen(const char * restrict filename, const char * restrict mode, FILE * restrict stream)$/;"	f
freopen_s	src/stdio/freopen_s.c	/^errno_t freopen_s(FILE * restrict * restrict newstreamptr,$/;"	f
frexp	src/math/frexp.c	/^TYPE TGFN(frexp)(TYPE value, int *exp)$/;"	f
fscanf	src/stdio/fscanf.c	/^int fscanf(FILE * restrict stream, const char * restrict format, ...)$/;"	f
fscanf_s	src/stdio/fscanf_s.c	/^int fscanf_s(FILE * restrict stream, const char * restrict format, ...)$/;"	f
fseek	src/stdio/fseek.c	/^int fseek(FILE *stream, long int offset, int whence)$/;"	f
fsetpos	src/stdio/fsetpos.c	/^int fsetpos(FILE *stream, const fpos_t *pos)$/;"	f
fstat	src/sys/stat/fstat.c	/^int fstat(int fildes, struct stat *buf)$/;"	f
fstatvfs	src/sys/statvfs/fstatvfs.c	/^int fstatvfs(int fildes, struct statvfs *buf)$/;"	f
fsync	src/unistd/fsync.c	/^int fsync(int fildes)$/;"	f
ftell	src/stdio/ftell.c	/^long int ftell(FILE *stream)$/;"	f
ftime	src/sys/timeb/ftime.c	/^int ftime(struct timeb *tp)$/;"	f
ftok	src/sys/ipc/ftok.c	/^key_t ftok(const char *path, int id)$/;"	f
ftruncate	src/unistd/ftruncate.c	/^int ftruncate(int fildes, off_t length)$/;"	f
ftw	src/ftw/ftw.c	/^int ftw(const char * path, int (*fn) (const char *, const struct stat * ptr, int flag), int ndirs)$/;"	f
funlockfile	src/stdio/funlockfile.c	/^void funlockfile(FILE * file)$/;"	f
fwide	src/wchar/fwide.c	/^int fwide(FILE * stream, int mode)$/;"	f
fwprintf	src/wchar/fwprintf.c	/^int fwprintf(FILE * restrict stream, const wchar_t * restrict format, ...)$/;"	f
fwprintf_s	src/wchar/fwprintf_s.c	/^int fwprintf_s(FILE * restrict stream, const wchar_t * restrict format, ...)$/;"	f
fwrite	src/stdio/fwrite.c	/^size_t fwrite(const void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream)$/;"	f
fwscanf	src/wchar/fwscanf.c	/^int fwscanf(FILE * restrict stream, const wchar_t * restrict format, ...)$/;"	f
fwscanf_s	src/wchar/fwscanf_s.c	/^int fwscanf_s(FILE * restrict stream, const wchar_t * restrict format, ...)$/;"	f
gamma	src/math/gamma.c	/^double gamma(double x)$/;"	f
gcvt	src/stdlib/gcvt.c	/^char *gcvt(double value, int ndigit, char *buf)$/;"	f
getc	src/stdio/getc.c	/^int getc(FILE *stream)$/;"	f
getc_unlocked	src/stdio/fgetc.c	5;"	d	file:
getc_unlocked	src/stdio/fgetc.c	6;"	d	file:
getc_unlocked	src/stdio/getc_unlocked.c	/^int getc_unlocked(FILE * stream)$/;"	f
getchar	src/stdio/getchar.c	/^int getchar(void)$/;"	f
getchar_unlocked	src/stdio/getchar_unlocked.c	/^int getchar_unlocked(void)$/;"	f
getcontext	src/ucontext/getcontext.c	/^int getcontext(ucontext_t *ucp)$/;"	f
getcwd	src/unistd/getcwd.c	/^char * getcwd(char *buf, size_t size)$/;"	f
getdate	src/time/getdate.c	/^struct tm *getdate(const char *string)$/;"	f
getdate_err	src/time/getdate_err.c	/^int getdate_err;$/;"	v
getdtablesize	src/unistd/getdtablesize.c	/^int getdtablesize(void)$/;"	f
getegid	src/unistd/getegid.c	/^gid_t getegid(void)$/;"	f
getenv	src/stdlib/getenv.c	/^char * getenv(const char * name)$/;"	f
getenv_s	src/stdlib/getenv_s.c	/^errno_t getenv_s(size_t * restrict len, char * restrict value, rsize_t maxsize, const char * restrict name)$/;"	f
geteuid	src/unistd/geteuid.c	/^uid_t geteuid(void)$/;"	f
getgid	src/unistd/getgid.c	/^gid_t getgid(void)$/;"	f
getgrent	src/grp/__grp.c	4;"	d	file:
getgrent	src/grp/__grp.c	5;"	d	file:
getgrent	src/grp/getgrent.c	/^struct group * getgrent(void)$/;"	f	file:
getgrgid	src/grp/getgrgid.c	/^struct group * getgrgid(gid_t gid)$/;"	f
getgrnam	src/grp/getgrnam.c	/^struct group * getgrnam(const char * name)$/;"	f
getgroups	src/unistd/getgroups.c	/^int getgroups(int gidsetsize, gid_t grouplist[])$/;"	f
gethostid	src/unistd/gethostid.c	/^long gethostid(void)$/;"	f
getitimer	src/sys/time/getitimer.c	/^int getitimer(int which, struct itimerval *value)$/;"	f
getlogin	src/unistd/getlogin.c	/^char * getlogin(void)$/;"	f
getmsg	src/stropts/getmsg.c	/^int getmsg(int fd , struct strbuf * ctlptr , struct strbuf * dataptr , int * flagsp )$/;"	f
getopt	src/unistd/getopt.c	/^int getopt(int argc, char * const argv[], const char *optstring)$/;"	f
getpagesize	src/unistd/getpagesize.c	/^int getpagesize(void)$/;"	f
getpass	src/unistd/getpass.c	/^char *getpass(const char *prompt)$/;"	f
getpgid	src/sys/wait/waitpid.c	14;"	d	file:
getpgid	src/unistd/getpgid.c	/^pid_t getpgid(pid_t pid)$/;"	f
getpgrp	src/unistd/getpgrp.c	/^pid_t getpgrp(void)$/;"	f
getpid	src/signal/raise.c	13;"	d	file:
getpid	src/unistd/getpid.c	/^pid_t getpid(void)$/;"	f
getpmsg	src/stropts/getpmsg.c	/^int getpmsg(int fd , struct strbuf * ctlptr , struct strbuf * dataptr , int * bandp , int * flagsp )$/;"	f
getppid	src/unistd/getppid.c	/^pid_t getppid(void)$/;"	f
getpriority	src/sys/resource/getpriority.c	/^int getpriority(int which, id_t who)$/;"	f
getpwent	src/pwd/__pwd.c	4;"	d	file:
getpwent	src/pwd/__pwd.c	5;"	d	file:
getpwent	src/pwd/getpwent.c	/^struct passwd * getpwent(void)$/;"	f	file:
getpwnam	src/pwd/getpwnam.c	/^struct passwd * getpwnam(const char * name)$/;"	f
getpwuid	src/pwd/getpwuid.c	/^struct passwd * getpwuid(uid_t uid)$/;"	f
getrlimit	src/sys/resource/getrlimit.c	/^int getrlimit(int resource, struct rlimit *rlp)$/;"	f
getrusage	src/sys/resource/getrusage.c	/^int getrusage(int who, struct rusage *r_usage)$/;"	f
gets	src/stdio/gets.c	/^char * gets(char *s)$/;"	f
gets_s	src/stdio/gets_s.c	/^char * gets_s(char *s, rsize_t n)$/;"	f
getsid	src/unistd/getsid.c	/^pid_t getsid(pid_t pid)$/;"	f
getsubopt	src/stdlib/getsubopt.c	/^int getsubopt(char ** optionp, char * const * keylistp, char ** valuep)$/;"	f
gettimeofday	src/sys/time/gettimeofday.c	/^int gettimeofday(struct timeval *restrict tp, void *restrict tzp)$/;"	f
getuid	src/unistd/getuid.c	/^uid_t getuid(void)$/;"	f
getutxent	src/utmpx/getutxent.c	/^struct utmpx * getutxent(void)$/;"	f
getutxid	src/utmpx/getutxid.c	/^struct utmpx * getutxid(const struct utmpx *id)$/;"	f
getutxline	src/utmpx/getutxline.c	/^struct utmpx * getutxline(const struct utmpx *line)$/;"	f
getw	src/stdio/getw.c	/^int getw(FILE *stream)$/;"	f
getwc	src/wchar/getwc.c	/^wint_t getwc(FILE * stream)$/;"	f
getwchar	src/wchar/getwchar.c	/^wint_t getwchar(void)$/;"	f
getwd	src/unistd/getwd.c	/^char *getwd(char *path_name)$/;"	f
glob	src/glob/glob.c	/^int glob(const char * restrict pattern, int flags, int (*errfunc) (const char * epath, int eerrno), glob_t * restrict pglob)$/;"	f
globfree	src/glob/globfree.c	/^void globfree(glob_t * pglob)$/;"	f
gmtime	src/time/gmtime.c	/^struct tm * gmtime(const time_t * timer)$/;"	f
gmtime_s	src/time/gmtime_s.c	/^struct tm * gmtime_s(const time_t * restrict timer, struct tm * restrict result)$/;"	f
gr_gid	src/grp/struct_group.c	/^	gid_t	gr_gid;$/;"	m	struct:group	file:
gr_mem	src/grp/struct_group.c	/^	char **	gr_mem;$/;"	m	struct:group	file:
gr_name	src/grp/struct_group.c	/^	char *	gr_name;$/;"	m	struct:group	file:
grantpt	src/stdlib/grantpt.c	/^int grantpt(int fildes)$/;"	f
group	src/grp/struct_group.c	/^struct group {$/;"	s	file:
hcreate	src/search/hcreate.c	/^int hcreate(size_t nel)$/;"	f
hdestroy	src/search/hdestroy.c	/^void hdestroy(void)$/;"	f
hsearch	src/search/hsearch.c	/^ENTRY * hsearch(ENTRY item, ACTION action)$/;"	f
htonl	src/arpa/inet/htonl.c	/^uint32_t htonl(uint32_t hostlong)$/;"	f
htons	src/arpa/inet/htons.c	/^uint16_t htons(uint16_t hostshort)$/;"	f
hypot	src/math/hypot.c	/^TYPE TGFN(hypot)(TYPE x, TYPE y)$/;"	f
iconv	src/iconv/iconv.c	/^size_t iconv(iconv_t cd, char ** restrict inbuf, size_t * restrict inbytesleft, char ** restrict outbuf, size_t * restrict outbytesleft)$/;"	f
iconv_close	src/iconv/iconv_close.c	/^int iconv_close(iconv_t cd)$/;"	f
iconv_open	src/iconv/iconv_open.c	/^iconv_t iconv_open(const char * tocode, const char * fromcode)$/;"	f
ignore_handler_s	src/stdlib/ignore_handler_s.c	/^void ignore_handler_s(const char * restrict msg, void * restrict ptr, errno_t error)$/;"	f
ilogb	src/math/ilogb.c	/^int TGFN(ilogb)(TYPE x)$/;"	f
imaxabs	src/inttypes/imaxabs.c	/^intmax_t imaxabs(intmax_t j)$/;"	f
imaxdiv	src/inttypes/imaxdiv.c	/^imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom)$/;"	f
index	src/strings/index.c	/^char *index(const char *s, int c)$/;"	f
inet_addr	src/arpa/inet/inet_addr.c	/^in_addr_t inet_addr(const char *cp)$/;"	f
inet_ntoa	src/arpa/inet/inet_ntoa.c	/^char *inet_ntoa(struct in_addr in)$/;"	f
inet_ntop	src/arpa/inet/inet_ntop.c	/^const char *inet_ntop(int af, const void *restrict src, char *restrict dst, socklen_t size)$/;"	f
inet_pton	src/arpa/inet/inet_pton.c	/^int inet_pton(int af, const char *restrict src, void *restrict dst)$/;"	f
initstate	src/stdlib/initstate.c	/^char * initstate(unsigned seed, char * state, size_t size)$/;"	f
insque	src/search/insque.c	/^void insque(void * element, void * pred)$/;"	f
ioctl	src/stropts/ioctl.c	/^int ioctl(int fildes , int request , ... )$/;"	f
isalnum	src/ctype/isalnum.c	/^int isalnum(int c)$/;"	f
isalpha	src/ctype/isalpha.c	/^int isalpha(int c)$/;"	f
isascii	src/ctype/isascii.c	/^int isascii(int c)$/;"	f
isastream	src/stropts/isastream.c	/^int isastream(int fildes )$/;"	f
isatty	src/stdio/freopen.c	18;"	d	file:
isatty	src/unistd/isatty.c	/^int isatty(int fildes)$/;"	f
isblank	src/ctype/isblank.c	/^int isblank(int c)$/;"	f
iscntrl	src/ctype/iscntrl.c	/^int iscntrl(int c)$/;"	f
isdigit	src/ctype/isdigit.c	/^int isdigit(int c)$/;"	f
isgraph	src/ctype/isgraph.c	/^int isgraph(int c)$/;"	f
isgreater	src/math/isgreater.c	3;"	d	file:
isgreaterequal	src/math/isgreaterequal.c	3;"	d	file:
isless	src/math/isless.c	3;"	d	file:
islessequal	src/math/islessequal.c	3;"	d	file:
islessgreater	src/math/islessgreater.c	3;"	d	file:
islower	src/ctype/islower.c	/^int islower(int c)$/;"	f
isprint	src/ctype/isprint.c	/^int isprint(int c)$/;"	f
ispunct	src/ctype/ispunct.c	/^int ispunct(int c)$/;"	f
isspace	src/ctype/isspace.c	/^int isspace(int c)$/;"	f
isspace	src/inttypes/wcstoimax.c	6;"	d	file:
isspace	src/inttypes/wcstoumax.c	6;"	d	file:
isspace	src/wchar/wcstol.c	6;"	d	file:
isspace	src/wchar/wcstoll.c	6;"	d	file:
isspace	src/wchar/wcstoul.c	6;"	d	file:
isspace	src/wchar/wcstoull.c	6;"	d	file:
isunordered	src/math/isunordered.c	3;"	d	file:
isupper	src/ctype/isupper.c	/^int isupper(int c)$/;"	f
iswalnum	src/wctype/iswalnum.c	/^int iswalnum(wint_t wc)$/;"	f
iswalpha	src/wctype/iswalpha.c	/^int iswalpha(wint_t wc)$/;"	f
iswblank	src/wctype/iswblank.c	/^int iswblank(wint_t wc)$/;"	f
iswcntrl	src/wctype/iswcntrl.c	/^int iswcntrl(wint_t wc)$/;"	f
iswctype	src/wctype/iswctype.c	/^int iswctype(wint_t wc, wctype_t desc)$/;"	f
iswdigit	src/wctype/iswdigit.c	/^int iswdigit(wint_t wc)$/;"	f
iswgraph	src/wctype/iswgraph.c	/^int iswgraph(wint_t wc)$/;"	f
iswlower	src/wctype/iswlower.c	/^int iswlower(wint_t wc)$/;"	f
iswprint	src/wctype/iswprint.c	/^int iswprint(wint_t wc)$/;"	f
iswpunct	src/wctype/iswpunct.c	/^int iswpunct(wint_t wc)$/;"	f
iswspace	src/wctype/iswspace.c	/^int iswspace(wint_t wc)$/;"	f
iswupper	src/wctype/iswupper.c	/^int iswupper(wint_t wc)$/;"	f
iswxdigit	src/wctype/iswxdigit.c	/^int iswxdigit(wint_t wc)$/;"	f
isxdigit	src/ctype/isxdigit.c	/^int isxdigit(int c)$/;"	f
j0	src/math/j0.c	/^double j0(double x)$/;"	f
j1	src/math/j1.c	/^double j1(double x)$/;"	f
jn	src/math/jn.c	/^double jn(int n, double x)$/;"	f
jrand48	src/stdlib/jrand48.c	/^long jrand48(unsigned short xsub[3])$/;"	f
kill	src/signal/kill.c	/^int kill(pid_t pid, int sig)$/;"	f
kill	src/signal/raise.c	12;"	d	file:
killpg	src/signal/killpg.c	/^int killpg(pid_t pgrp, int sig)$/;"	f
l64a	src/stdlib/l64a.c	/^char * l64a(long value)$/;"	f
labs	src/stdlib/labs.c	/^long int labs(long int j)$/;"	f
lchown	src/unistd/lchown.c	/^int lchown(const char *path, uid_t owner, gid_t group)$/;"	f
lcong48	src/stdlib/lcong48.c	/^void lcong48(unsigned short param[7])$/;"	f
ldexp	src/math/ldexp.c	/^TYPE TGFN(ldexp)(TYPE x, int exp)$/;"	f
ldiv	src/stdlib/ldiv.c	/^ldiv_t ldiv(long int numer, long int denom)$/;"	f
lfind	src/search/lfind.c	/^void * lfind(const void * key, const void * base, size_t * nelp, size_t width, int (*compar) (const void *, const void *))$/;"	f
lgamma	src/math/lgamma.c	/^TYPE TGFN(lgamma)(TYPE x)$/;"	f
link	src/unistd/link.c	/^int link(const char *path1, const char *path2)$/;"	f
lio_listio	src/aio/lio_listio.c	/^int lio_listio(int mode, struct aiocb * const list[restrict], int nent, struct sigevent * restrict sig)$/;"	f
llabs	src/stdlib/llabs.c	/^long long int llabs(long long int j)$/;"	f
lldiv	src/stdlib/lldiv.c	/^lldiv_t lldiv(long long int numer, long long int denom)$/;"	f
llrint	src/math/llrint.c	/^long long int TGFN(llrint)(TYPE x)$/;"	f
llround	src/math/llround.c	/^long long int TGFN(llround)(TYPE x)$/;"	f
loc1	src/regexp/loc1.c	/^char *loc1;$/;"	v
loc2	src/regexp/loc2.c	/^char *loc2;$/;"	v
localeconv	src/locale/localeconv.c	/^struct lconv * localeconv(void)$/;"	f
localtime	src/time/localtime.c	/^struct tm * localtime(const time_t * timer)$/;"	f
localtime_s	src/time/localtime_s.c	/^struct tm * localtime_s(const time_t * restrict timer, struct tm * restrict result)$/;"	f
lockf	src/unistd/lockf.c	/^int lockf(int fildes, int function, off_t size)$/;"	f
locs	src/regexp/locs.c	/^char *locs;$/;"	v
log	src/math/log.c	/^TYPE TGFN(log)(TYPE x)$/;"	f
log10	src/math/log10.c	/^TYPE TGFN(log10)(TYPE x)$/;"	f
log1p	src/math/log1p.c	/^TYPE TGFN(log1p)(TYPE x)$/;"	f
log2	src/math/log2.c	/^TYPE TGFN(log2)(TYPE x)$/;"	f
logb	src/math/logb.c	/^TYPE TGFN(logb)(TYPE x)$/;"	f
longjmp	src/setjmp/longjmp.c	/^_Noreturn void longjmp(jmp_buf env, int val)$/;"	f
lrand48	src/stdlib/lrand48.c	/^long lrand48(void)$/;"	f
lrint	src/math/lrint.c	/^long int TGFN(lrint)(TYPE x)$/;"	f
lround	src/math/lround.c	/^long int TGFN(lround)(TYPE x)$/;"	f
lsearch	src/search/lsearch.c	/^void * lsearch(const void * key, void * base, size_t * nelp, size_t width, int (*compar) (const void *, const void *))$/;"	f
lseek	src/unistd/lseek.c	/^off_t lseek(int fildes, off_t offset, int whence)$/;"	f
lstat	src/sys/stat/lstat.c	/^int lstat(const char * restrict path, struct stat * restrict buf)$/;"	f
main	src/monetary/test_strfmon.c	/^int main(int argc, char *argv)$/;"	f
makecontext	src/ucontext/makecontext.c	/^void makecontext(ucontext_t *ucp, void (*func)(), int argc, ...)$/;"	f
malloc	src/stdlib/malloc.c	/^void * malloc(size_t size)$/;"	f
mblen	src/stdlib/mblen.c	/^int mblen(const char * s, size_t n)$/;"	f
mbrlen	src/wchar/mbrlen.c	/^size_t mbrlen(const char * restrict s, size_t n, mbstate_t * restrict ps)$/;"	f
mbrtoc16	src/uchar/mbrtoc16.c	/^size_t mbrtoc16(char16_t * restrict pc16, const char * restrict s, size_t n, mbstate_t * restrict ps)$/;"	f
mbrtoc32	src/uchar/mbrtoc32.c	/^size_t mbrtoc32(char32_t * restrict pc32, const char * restrict s, size_t n, mbstate_t * restrict ps)$/;"	f
mbrtowc	src/wchar/mbrtowc.c	/^size_t mbrtowc(wchar_t * restrict pwc, const char * restrict s, size_t n, mbstate_t * restrict ps)$/;"	f
mbsinit	src/wchar/mbsinit.c	/^int mbsinit(const mbstate_t * ps)$/;"	f
mbsrtowcs	src/wchar/mbsrtowcs.c	/^size_t mbsrtowcs(wchar_t * restrict dst, const char * restrict src, size_t len, mbstate_t * restrict ps)$/;"	f
mbsrtowcs_s	src/wchar/mbsrtowcs_s.c	/^errno_t mbsrtowcs_s(size_t * restrict retval,$/;"	f
mbstowcs	src/stdlib/mbstowcs.c	/^size_t mbstowcs(wchar_t * restrict pwcs, const char * restrict s, size_t n)$/;"	f
mbstowcs_s	src/stdlib/mbstowcs_s.c	/^errno_t mbstowcs_s(size_t * restrict retval, wchar_t * restrict dst, rsize_t dstmax, const char * restrict src, rsize_t len)$/;"	f
mbtowc	src/stdlib/mbtowc.c	/^int mbtowc(wchar_t * restrict pwc, const char * restrict s, size_t n)$/;"	f
memccpy	src/string/memccpy.c	/^void *memccpy(void * restrict s1, const void * restrict s2, int c, size_t n)$/;"	f
memchr	src/string/memchr.c	/^void * memchr(const void *s, int c, size_t n)$/;"	f
memcmp	src/string/memcmp.c	/^int memcmp(const void *s1, const void *s2, size_t n)$/;"	f
memcpy	src/string/memcpy.c	/^void * memcpy(void * restrict s1, const void * restrict s2, size_t n)$/;"	f
memcpy_s	src/string/memcpy_s.c	/^errno_t memcpy_s(void * restrict s1, rsize_t s1max, const void * restrict s2, rsize_t n)$/;"	f
memmove	src/string/memmove.c	/^void * memmove(void *s1, const void *s2, size_t n)$/;"	f
memmove_s	src/string/memmove_s.c	/^errno_t memmove_s(void *s1, rsize_t s1max, const void *s2, rsize_t n)$/;"	f
memset	src/string/memset.c	/^void * memset(void *s, int c, size_t n)$/;"	f
memset_s	src/string/memset_s.c	/^errno_t memset_s(void *s, rsize_t smax, int c, rsize_t n)$/;"	f
mkdir	src/sys/stat/mkdir.c	/^int mkdir(const char *path, mode_t mode)$/;"	f
mkfifo	src/sys/stat/mkfifo.c	/^int mkfifo(const char *path, mode_t mode)$/;"	f
mknod	src/sys/stat/mknod.c	/^int mknod(const char *path, mode_t mode, dev_t dev)$/;"	f
mkstemp	src/stdlib/mkstemp.c	/^int mkstemp(char * template)$/;"	f
mktemp	src/stdlib/mktemp.c	/^char *mktemp(char *template)$/;"	f
mktime	src/time/mktime.c	/^time_t mktime(struct tm * timeptr)$/;"	f
mlock	src/sys/mman/mlock.c	/^int mlock(const void *addr, size_t len)$/;"	f
mlockall	src/sys/mman/mlockall.c	/^int mlockall(int flags)$/;"	f
mmap	src/stdlib/realloc.c	14;"	d	file:
mmap	src/sys/mman/mmap.c	/^void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off)$/;"	f
modf	src/math/modf.c	/^TYPE TGFN(modf)(TYPE value, TYPE *iptr)$/;"	f
modtime	src/utime/struct_utimbuf.c	/^	time_t modtime;$/;"	m	struct:utimbuf	file:
mprotect	src/sys/mman/mprotect.c	/^int mprotect(void *addr, size_t len, int prot)$/;"	f
mq_attr	src/mqueue/struct_mq_attr.c	/^struct mq_attr {$/;"	s	file:
mq_close	src/mqueue/mq_close.c	/^int mq_close(mqd_t mqdes)$/;"	f
mq_curmsgs	src/mqueue/struct_mq_attr.c	/^	long mq_curmsgs;$/;"	m	struct:mq_attr	file:
mq_flags	src/mqueue/struct_mq_attr.c	/^	long mq_flags;$/;"	m	struct:mq_attr	file:
mq_getattr	src/mqueue/mq_getattr.c	/^int mq_getattr(mqd_t mqdes, struct mq_attr * mqstat)$/;"	f
mq_maxmsg	src/mqueue/struct_mq_attr.c	/^	long mq_maxmsg;$/;"	m	struct:mq_attr	file:
mq_msgsize	src/mqueue/struct_mq_attr.c	/^	long mq_msgsize;$/;"	m	struct:mq_attr	file:
mq_notify	src/mqueue/mq_notify.c	/^int mq_notify(mqd_t mqdes, const struct sigevent * notification)$/;"	f
mq_open	src/mqueue/mq_open.c	/^mqd_t mq_open(const char * name, int oflag, ...)$/;"	f
mq_receive	src/mqueue/mq_receive.c	/^ssize_t mq_receive(mqd_t mqdes, char * msg_ptr, size_t msg_len, unsigned * msg_prio)$/;"	f
mq_send	src/mqueue/mq_send.c	/^int mq_send(mqd_t mqdes, const char * msg_ptr, size_t msg_len, unsigned msg_prio)$/;"	f
mq_setattr	src/mqueue/mq_setattr.c	/^int mq_setattr(mqd_t mqdes, const struct mq_attr * restrict mqstat, struct mq_attr * restrict omqstat)$/;"	f
mq_unlink	src/mqueue/mq_unlink.c	/^int mq_unlink(const char * name)$/;"	f
mrand48	src/stdlib/mrand48.c	/^long mrand48(void)$/;"	f
msgctl	src/sys/msg/msgctl.c	/^int msgctl(int msqid, int cmd, struct msqid_ds *buf)$/;"	f
msgget	src/sys/msg/msgget.c	/^int msgget(key_t key, int msgflg)$/;"	f
msgrcv	src/sys/msg/msgrcv.c	/^ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg)$/;"	f
msgsnd	src/sys/msg/msgsnd.c	/^int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg)$/;"	f
msync	src/sys/mman/msync.c	/^int msync(void * addr , size_t len , int flags )$/;"	f
mtx_destroy	src/threads/mtx_destroy.c	/^void mtx_destroy(mtx_t *mtx)$/;"	f
mtx_init	src/threads/mtx_init.c	/^int mtx_init(mtx_t *mtx, int type)$/;"	f
mtx_lock	src/threads/mtx_lock.c	/^int mtx_lock(mtx_t *mtx)$/;"	f
mtx_timedlock	src/threads/mtx_timedlock.c	/^int mtx_timedlock(mtx_t *restrict mtx, const struct timespec *restrict ts)$/;"	f
mtx_trylock	src/threads/mtx_trylock.c	/^int mtx_trylock(mtx_t *mtx)$/;"	f
mtx_unlock	src/threads/mtx_unlock.c	/^int mtx_unlock(mtx_t *mtx)$/;"	f
munlock	src/sys/mman/munlock.c	/^int munlock(const void *addr, size_t len)$/;"	f
munlockall	src/sys/mman/munlockall.c	/^int munlockall(void)$/;"	f
munmap	src/sys/mman/munmap.c	/^int munmap(void*addr, size_t len)$/;"	f
nan	src/math/nan.c	/^TYPE TGFN(nan)(const char *tagp)$/;"	f
nanosleep	src/time/nanosleep.c	/^int nanosleep(const struct timespec *rqtp, struct timespec *rmtp)$/;"	f
nearbyint	src/math/nearbyint.c	/^TYPE TGFN(nearbyint)(TYPE x)$/;"	f
nextafter	src/math/nextafter.c	/^TYPE TGFN(nextafter)(TYPE x, TYPE y)$/;"	f
nexttoward	src/math/nexttoward.c	/^TYPE TGFN(nexttoward)(TYPE x, TYPE y)$/;"	f
nftw	src/ftw/nftw.c	/^int nftw(const char * path, int (*fn) (const char *, const struct stat *, int, struct FTW *), int fd_limit, int flags)$/;"	f
nice	src/unistd/nice.c	/^int nice(int incr)$/;"	f
nl_catd	src/nl_types/nl_catd.c	/^typedef unsigned long int                                               nl_catd;$/;"	t	file:
nl_item	src/nl_types/nl_item.c	/^typedef int                                                             nl_item;$/;"	t	file:
nl_langinfo	src/langinfo/nl_langinfo.c	/^char * nl_langinfo(nl_item item)$/;"	f
nrand48	src/stdlib/nrand48.c	/^long nrand48(unsigned short xsubi[3])$/;"	f
ntohl	src/arpa/inet/ntohl.c	/^uint32_t ntohl(uint32_t netlong)$/;"	f
ntohs	src/arpa/inet/ntohs.c	/^uint16_t ntohs(uint16_t netshort)$/;"	f
once_flag	src/threads/once_flag.c	/^typedef \/* same as pthread_once_t *\/ once_flag;$/;"	t	file:
open	src/fcntl/open.c	/^int open(const char *path, int oflag, ...)$/;"	f
open	src/stdio/freopen.c	17;"	d	file:
open	src/stdlib/realloc.c	15;"	d	file:
opendir	src/dirent/opendir.c	/^DIR * opendir(const char * dirname)$/;"	f
openlog	src/syslog/openlog.c	/^void openlog(const char * ident, int logopt, int facility)$/;"	f
optarg	src/unistd/optarg.c	/^char * optarg;$/;"	v
opterr	src/unistd/opterr.c	/^int opterr;$/;"	v
optind	src/unistd/optind.c	/^int optind;$/;"	v
optopt	src/unistd/optopt.c	/^int optopt;$/;"	v
passwd	src/pwd/struct_passwd.c	/^struct passwd {$/;"	s	file:
pathconf	src/unistd/pathconf.c	/^long pathconf(const char *path, int name)$/;"	f
pause	src/unistd/pause.c	/^int pause(void)$/;"	f
pclose	src/stdio/pclose.c	/^int pclose(FILE * stream)$/;"	f
perror	src/stdio/perror.c	/^void perror(const char *s)$/;"	f
pipe	src/unistd/pipe.c	/^int pipe(int fildes[2])$/;"	f
poll	src/poll/poll.c	/^int poll(struct pollfd fds[], nfds_t nfds, int timeout)$/;"	f
pow	src/math/pow.c	/^TYPE TGFN(pow)(TYPE x, TYPE y)$/;"	f
printf	src/stdio/printf.c	/^int printf(const char *format, ...)$/;"	f
printf_s	src/stdio/printf_s.c	/^int printf_s(const char *format, ...)$/;"	f
ptsname	src/stdlib/ptsname.c	/^char * ptsname(int fildes)$/;"	f
putc	src/stdio/putc.c	/^int putc(int c, FILE *stream)$/;"	f
putc_unlocked	src/stdio/fputc.c	5;"	d	file:
putc_unlocked	src/stdio/fputc.c	6;"	d	file:
putc_unlocked	src/stdio/putc_unlocked.c	/^int putc_unlocked(int c, FILE *stream)$/;"	f
putchar	src/stdio/putchar.c	/^int putchar(int c)$/;"	f
putchar_unlocked	src/stdio/putchar_unlocked.c	/^int putchar_unlocked(int c)$/;"	f
putenv	src/stdlib/putenv.c	/^int putenv(char * string)$/;"	f
putmsg	src/stropts/putmsg.c	/^int putmsg(int fd , const struct strbuf * ctlptr , const struct strbuf * dataptr , int flags )$/;"	f
putpmsg	src/stropts/putpmsg.c	/^int putpmsg(int fd , const struct strbuf * ctlptr , const struct strbuf * dataptr , int band , int flags )$/;"	f
puts	src/stdio/puts.c	/^int puts(const char *s)$/;"	f
pututxline	src/utmpx/pututxline.c	/^struct utmpx * pututxline(const struct utmpx *utmpx)$/;"	f
putw	src/stdio/putw.c	/^int putw(int w, FILE *stream)$/;"	f
putwc	src/wchar/putwc.c	/^wint_t putwc(wchar_t c, FILE * stream)$/;"	f
putwchar	src/wchar/putwchar.c	/^wint_t putwchar(wchar_t c)$/;"	f
pw_dir	src/pwd/struct_passwd.c	/^	char *	pw_dir;$/;"	m	struct:passwd	file:
pw_gid	src/pwd/struct_passwd.c	/^	gid_t	pw_gid;$/;"	m	struct:passwd	file:
pw_name	src/pwd/struct_passwd.c	/^	char *	pw_name;$/;"	m	struct:passwd	file:
pw_shell	src/pwd/struct_passwd.c	/^	char *	pw_shell;$/;"	m	struct:passwd	file:
pw_uid	src/pwd/struct_passwd.c	/^	uid_t	pw_uid;$/;"	m	struct:passwd	file:
qsort	src/stdlib/qsort.c	/^void qsort(void * base, size_t nmemb, size_t size, int (*compar)(const void *, const void *))$/;"	f
qsort_s	src/stdlib/qsort_s.c	/^errno_t qsort_s(void *base, rsize_t nmemb, rsize_t size,$/;"	f
quick_exit	src/stdlib/quick_exit.c	/^_Noreturn void quick_exit(int status)$/;"	f
raise	src/signal/raise.c	/^int raise(int sig)$/;"	f
rand	src/stdlib/rand.c	/^int rand(void)$/;"	f
random	src/stdlib/random.c	/^long random(void)$/;"	f
re_comp	src/re_comp/re_comp.c	/^char *re_comp(const char *string)$/;"	f
re_exec	src/re_comp/re_exec.c	/^int re_exec(const char *string)$/;"	f
read	src/stdio/getc_unlocked.c	9;"	d	file:
read	src/unistd/read.c	/^ssize_t read(int fildes, void *buf, size_t nbyte)$/;"	f
readdir	src/dirent/readdir.c	/^struct dirent * readdir(DIR * dirp)$/;"	f
readlink	src/unistd/readlink.c	/^ssize_t readlink(const char * restrict path, char * restrict buf, size_t bufsize)$/;"	f
readlink	src/unistd/ttyname.c	9;"	d	file:
readv	src/sys/uio/readv.c	/^ssize_t readv(int fildes, const struct iovec * iov, int iovcnt)$/;"	f
realloc	src/stdlib/realloc.c	/^void * realloc(void * ptr, size_t size)$/;"	f
realpath	src/stdlib/realpath.c	/^char * realpath(const char * restrict file_name, char * restrict resolved_name)$/;"	f
regcmp	src/libgen/regcmp.c	/^char *regcmp(const char *string1, ... \/*, (char*)0 *\/)$/;"	f
regcomp	src/regex/regcomp.c	/^int regcomp(regex_t * restrict preg, const char * restrict pattern, int cflags)$/;"	f
regerror	src/regex/regerror.c	/^size_t regerror(int errcode, const regex_t * restrict preg, char * restrict errbuf, size_t errbuf_size)$/;"	f
regex	src/libgen/regex.c	/^char *regex(const char *re, const char *subject, ...)$/;"	f
regexec	src/regex/regexec.c	/^int regexec(const regex_t * restrict preg, const char * restrict string, size_t nmatch, regmatch_t pmatch[restrict], int eflags)$/;"	f
regfree	src/regex/regfree.c	/^void regfree(regex_t * preg)$/;"	f
remainder	src/math/remainder.c	/^TYPE TGFN(remainder)(TYPE x, TYPE y)$/;"	f
remove	src/stdio/remove.c	/^int remove(const char *filename)$/;"	f
remque	src/search/remque.c	/^void remque(void * element)$/;"	f
remquo	src/math/remquo.c	/^TYPE TGFN(remquo)(TYPE x, TYPE y, int *quo)$/;"	f
rename	src/stdio/rename.c	/^int rename(const char *old, const char *new)$/;"	f
rewind	src/stdio/rewind.c	/^void rewind(FILE *stream)$/;"	f
rewinddir	src/dirent/rewinddir.c	/^void rewinddir(DIR * dirp)$/;"	f
rindex	src/strings/rindex.c	/^char *rindex(const char *s, int c)$/;"	f
rint	src/math/rint.c	/^TYPE TGFN(rint)(TYPE x)$/;"	f
rmdir	src/stdio/remove.c	14;"	d	file:
rmdir	src/unistd/rmdir.c	/^int rmdir(const char *path)$/;"	f
round	src/math/round.c	/^TYPE TGFN(round)(TYPE x)$/;"	f
sbrk	src/unistd/sbrk.c	/^void *sbrk(int incr)$/;"	f
scalb	src/math/scalb.c	/^double scalb(double x, double n)$/;"	f
scalbln	src/math/scalbln.c	/^TYPE TGFN(scalbln)(TYPE x, long int n)$/;"	f
scalbn	src/math/scalbn.c	/^TYPE TGFN(scalbn)(TYPE x, int n)$/;"	f
scanf	src/stdio/scanf.c	/^int scanf(const char * restrict format, ...)$/;"	f
scanf_s	src/stdio/scanf_s.c	/^int scanf_s(const char * restrict format, ...)$/;"	f
sched_get_priority_max	src/sched/sched_get_priority_max.c	/^int sched_get_priority_max(int policy)$/;"	f
sched_get_priority_min	src/sched/sched_get_priority_min.c	/^int sched_get_priority_min(int policy)$/;"	f
sched_getparam	src/sched/sched_getparam.c	/^int sched_getparam(pid_t pid, struct sched_param * param)$/;"	f
sched_getscheduler	src/sched/sched_getscheduler.c	/^int sched_getscheduler(pid_t pid)$/;"	f
sched_rr_get_interval	src/sched/sched_rr_get_interval.c	/^int sched_rr_get_interval(pid_t pid, struct timespec * interval)$/;"	f
sched_setparam	src/sched/sched_setparam.c	/^int sched_setparam(pid_t pid, const struct sched_param * param)$/;"	f
sched_setscheduler	src/sched/sched_setscheduler.c	/^int sched_setscheduler(pid_t pid, int policy, const struct sched_param * param)$/;"	f
sched_yield	src/sched/sched_yield.c	/^int sched_yield(void)$/;"	f
seed48	src/stdlib/seed48.c	/^unsigned short * seed48(unsigned short seed16v[3])$/;"	f
seekdir	src/dirent/seekdir.c	/^void seekdir(DIR * dirp, long loc)$/;"	f
select	src/sys/time/select.c	/^int select(int nfds , fd_set * readfds , fd_set * writefds , fd_set * errorfds , struct timeval * timeout )$/;"	f
sem_close	src/semaphore/sem_close.c	/^int sem_close(sem_t *sem)$/;"	f
sem_destroy	src/semaphore/sem_destroy.c	/^int sem_destroy(sem_t * sem)$/;"	f
sem_getvalue	src/semaphore/sem_getvalue.c	/^int sem_getvalue(sem_t * restrict sem, int * restrict sval)$/;"	f
sem_init	src/semaphore/sem_init.c	/^int sem_init(sem_t * sem, int pshared, unsigned value)$/;"	f
sem_open	src/semaphore/sem_open.c	/^sem_t * sem_open(const char * name, int oflag, ...)$/;"	f
sem_post	src/semaphore/sem_post.c	/^int sem_post(sem_t * sem)$/;"	f
sem_trywait	src/semaphore/sem_trywait.c	/^int sem_trywait(sem_t * sem)$/;"	f
sem_unlink	src/semaphore/sem_unlink.c	/^int sem_unlink(const char * name)$/;"	f
sem_wait	src/semaphore/sem_wait.c	/^int sem_wait(sem_t * sem)$/;"	f
semctl	src/sys/sem/semctl.c	/^int semctl(int semid, int semnum, int cmd, ...)$/;"	f
semget	src/sys/sem/semget.c	/^int semget(key_t key, int nsems, int semflg)$/;"	f
semop	src/sys/sem/semop.c	/^int semop(int semid, struct sembuf *sops, size_t nsops)$/;"	f
set_constraint_handler_s	src/stdlib/set_constraint_handler_s.c	/^constraint_handler_t set_constraint_handler_s(constraint_handler_t handler)$/;"	f
setall	src/locale/__load_locale.c	9;"	d	file:
setbuf	src/stdio/setbuf.c	/^void setbuf(FILE * restrict stream, char * restrict buf)$/;"	f
setcontext	src/ucontext/setcontext.c	/^int setcontext(const ucontext_t *ucp)$/;"	f
setgid	src/unistd/setgid.c	/^int setgid(gid_t gid)$/;"	f
setgrent	src/grp/setgrent.c	/^void setgrent(void)$/;"	f
setitimer	src/sys/time/setitimer.c	/^int setitimer(int which, const struct itimerval *restrict value, struct itimerval *restrict ovalue)$/;"	f
setjmp	src/setjmp/setjmp.c	/^int setjmp(jmp_buf env)$/;"	f
setkey	src/stdlib/setkey.c	/^void setkey(const char * key)$/;"	f
setlocale	src/locale/setlocale.c	/^char * setlocale(int category, const char *locale)$/;"	f
setlogmask	src/syslog/setlogmask.c	/^int setlogmask(int maskpri)$/;"	f
setpgid	src/unistd/setpgid.c	/^int setpgid(pid_t pid, pid_t pgid)$/;"	f
setpgrp	src/unistd/setpgrp.c	/^pid_t setpgrp(void)$/;"	f
setpriority	src/sys/resource/setpriority.c	/^int setpriority(int which, id_t who, int value)$/;"	f
setpwent	src/pwd/setpwent.c	/^void setpwent(void)$/;"	f
setregid	src/unistd/setregid.c	/^int setregid(gid_t rgid, gid_t egid)$/;"	f
setreuid	src/unistd/setreuid.c	/^int setreuid(uid_t ruid, uid_t euid)$/;"	f
setrlimit	src/sys/resource/setrlimit.c	/^int setrlimit(int resource, const struct rlimit *rlp)$/;"	f
setsid	src/unistd/setsid.c	/^pid_t setsid(void)$/;"	f
setstate	src/stdlib/setstate.c	/^char * setstate(char * state)$/;"	f
setuid	src/unistd/setuid.c	/^int setuid(uid_t uid)$/;"	f
setutxent	src/utmpx/setutxent.c	/^void setutxent(void)$/;"	f
setvbuf	src/stdio/setvbuf.c	/^int setvbuf(FILE *stream, char *buf, int mode, size_t size)$/;"	f
shm_open	src/sys/mman/shm_open.c	/^int shm_open(const char *name, int oflag, mode_t mode)$/;"	f
shm_unlink	src/sys/mman/shm_unlink.c	/^int shm_unlink(const char *name)$/;"	f
shmat	src/sys/shm/shmat.c	/^void * shmat(int shmid, const void *shmaddr, int shmflg)$/;"	f
shmctl	src/sys/shm/shmctl.c	/^int shmctl(int shmid, int cmd, struct shmid_ds *buf)$/;"	f
shmdt	src/sys/shm/shmdt.c	/^int shmdt(const void *shmaddr)$/;"	f
shmget	src/sys/shm/shmget.c	/^int shmget(key_t key, size_t size, int shmflg)$/;"	f
sigaction	src/signal/sigaction.c	/^int sigaction(int sig, const struct sigaction * restrict act, struct sigaction * restrict oact)$/;"	f
sigaddset	src/signal/sigaddset.c	/^int sigaddset(sigset_t * set, int signo)$/;"	f
sigaltstack	src/signal/sigaltstack.c	/^int sigaltstack(const stack_t * restrict ss, stack_t * restrict oss)$/;"	f
sigdelset	src/signal/sigdelset.c	/^int sigdelset(sigset_t * set, int signo)$/;"	f
sigemptyset	src/signal/sigemptyset.c	/^int sigemptyset(sigset_t * set)$/;"	f
sigfillset	src/signal/sigfillset.c	/^int sigfillset(sigset_t * set)$/;"	f
sighold	src/signal/sighold.c	/^int sighold(int sig)$/;"	f
sigignore	src/signal/sigignore.c	/^int sigignore(int sig)$/;"	f
siginterrupt	src/signal/siginterrupt.c	/^int siginterrupt(int sig, int flag)$/;"	f
sigismember	src/signal/sigismember.c	/^int sigismember(const sigset_t * set, int signo)$/;"	f
sigjmp_buf	src/setjmp/sigjmp_buf.c	/^typedef jmp_buf                                                      sigjmp_buf;$/;"	t	file:
siglongjmp	src/setjmp/siglongjmp.c	/^void siglongjmp(sigjmp_buf env, int val)$/;"	f
sigmask	src/signal/sigmask.c	/^int sigmask(int signum)$/;"	f
signal	src/signal/signal.c	/^void (*signal(int sig, void (*func)(int)))(int)$/;"	f
signgam	src/math/signgam.c	/^int signgam;$/;"	v
sigpause	src/signal/sigpause.c	/^int sigpause(int sig)$/;"	f
sigpending	src/signal/sigpending.c	/^int sigpending(sigset_t * set)$/;"	f
sigprocmask	src/signal/sigprocmask.c	/^int sigprocmask(int how, const sigset_t * restrict set, sigset_t * restrict oset)$/;"	f
sigqueue	src/signal/sigqueue.c	/^int sigqueue(pid_t pid, int signo, const union sigval value)$/;"	f
sigrelse	src/signal/sigrelse.c	/^int sigrelse(int sig)$/;"	f
sigset	src/signal/sigset.c	/^void (*sigset(int sig, void (*disp)(int)))(int)$/;"	f
sigsetjmp	src/setjmp/sigsetjmp.c	/^int sigsetjmp(sigjmp_buf env, int savemask)$/;"	f
sigstack	src/signal/sigstack.c	/^int sigstack(struct sigstack *ss, struct sigstack *oss)$/;"	f
sigsuspend	src/signal/sigsuspend.c	/^int sigsuspend(const sigset_t * sigmask)$/;"	f
sigtimedwait	src/signal/sigtimedwait.c	/^int sigtimedwait(const sigset_t * restrict set, siginfo_t * restrict info, const struct timespec * restrict timeout)$/;"	f
sigwaitinfo	src/signal/sigwaitinfo.c	/^int sigwaitinfo(const sigset_t * restrict set, siginfo_t * restrict info)$/;"	f
sin	src/math/sin.c	/^TYPE TGFN(sin)(TYPE x)$/;"	f
sinh	src/math/sinh.c	/^TYPE TGFN(sinh)(TYPE x)$/;"	f
sleep	src/unistd/sleep.c	/^unsigned sleep(unsigned seconds)$/;"	f
snprintf	src/stdio/snprintf.c	/^int snprintf(char * restrict s, size_t n, const char * restrict format, ...)$/;"	f
snprintf_s	src/stdio/snprintf_s.c	/^int snprintf_s( char * restrict s, rsize_t n, const char * restrict format, ...)$/;"	f
snwprintf_s	src/wchar/snwprintf_s.c	/^int snwprintf_s(wchar_t * restrict s, rsize_t n, const wchar_t * restrict format, ...)$/;"	f
sprintf	src/stdio/sprintf.c	/^int sprintf(char * restrict s, const char * restrict format, ...)$/;"	f
sprintf_s	src/stdio/sprintf_s.c	/^int sprintf_s(char * restrict s, rsize_t n, const char * restrict format, ...)$/;"	f
sqrt	src/math/sqrt.c	/^TYPE TGFN(sqrt)(TYPE x)$/;"	f
srand	src/stdlib/srand.c	/^void srand(unsigned int seed)$/;"	f
srand48	src/stdlib/srand48.c	/^void srand48(long seedval)$/;"	f
srandom	src/stdlib/srandom.c	/^void srandom(unsigned seed)$/;"	f
sscanf	src/stdio/sscanf.c	/^int sscanf(const char * restrict s, const char * restrict format, ...)$/;"	f
sscanf_s	src/stdio/sscanf_s.c	/^int sscanf_s(const char * restrict s, const char * restrict format, ...)$/;"	f
stat	src/stdio/remove.c	13;"	d	file:
stat	src/sys/stat/stat.c	/^int stat(const char * restrict path, struct stat * restrict buf)$/;"	f
statvfs	src/sys/statvfs/statvfs.c	/^int statvfs(const char * restrict path, struct statvfs * restrict buf)$/;"	f
step	src/regexp/step.c	/^int step(const char *string, const char *expbuf)$/;"	f
strcasecmp	src/strings/strcasecmp.c	/^int strcasecmp(const char *s1, const char *s2)$/;"	f
strcat	src/string/strcat.c	/^char * strcat(char * restrict s1, const char * restrict s2)$/;"	f
strcat_s	src/string/strcat_s.c	/^errno_t strcat_s(char * restrict s1, rsize_t s1max, const char * restrict s2)$/;"	f
strchr	src/string/strchr.c	/^char * strchr(const char *s, int c)$/;"	f
strcmp	src/string/strcmp.c	/^int strcmp(const char *s1, const char *s2)$/;"	f
strcoll	src/string/strcoll.c	/^int strcoll(const char *s1, const char *s2)$/;"	f
strcpy	src/string/strcpy.c	/^char * strcpy(char * restrict s1, const char * restrict s2)$/;"	f
strcpy_s	src/string/strcpy_s.c	/^errno_t strcpy_s(char * restrict s1, rsize_t s1max, const char * restrict s2)$/;"	f
strcspn	src/string/strcspn.c	/^size_t strcspn(const char *s1, const char *s2)$/;"	f
strdup	src/string/strdup.c	/^char * strdup(const char *s)$/;"	f
strerror	src/string/strerror.c	/^char * strerror(int errnum)$/;"	f
strerror_s	src/string/strerror_s.c	/^errno_t strerror_s(char *s, rsize_t maxsize, errno_t errnum)$/;"	f
strerrorlen_s	src/string/strerrorlen_s.c	/^size_t strerrorlen_s(errno_t errnum)$/;"	f
strfmon	src/monetary/strfmon.c	/^ssize_t strfmon(char * restrict s, size_t maxsize, const char * restrict format, ...)$/;"	f
strftime	src/time/strftime.c	/^size_t strftime(char * restrict s, size_t maxsize, const char * restrict format, const struct tm * restrict timeptr)$/;"	f
strlen	src/string/strlen.c	/^size_t strlen(const char *s)$/;"	f
strncasecmp	src/strings/strncasecmp.c	/^int strncasecmp(const char *s1, const char *s2, size_t n)$/;"	f
strncat	src/string/strncat.c	/^char * strncat(char * restrict s1, const char * restrict s2, size_t n)$/;"	f
strncat_s	src/string/strncat_s.c	/^errno_t strncat_s(char * restrict s1, rsize_t s1max, const char * restrict s2, rsize_t n)$/;"	f
strncmp	src/string/strncmp.c	/^int strncmp(const char *s1, const char *s2, size_t n)$/;"	f
strncpy	src/string/strncpy.c	/^char * strncpy(char * restrict s1, const char * restrict s2, size_t n)$/;"	f
strncpy_s	src/string/strncpy_s.c	/^errno_t strncpy_s(char * restrict s1, rsize_t s1max, const char * restrict s2, rsize_t n)$/;"	f
strnlen_s	src/string/strnlen_s.c	/^size_t strnlen_s(const char *s, size_t maxsize)$/;"	f
strpbrk	src/string/strpbrk.c	/^char * strpbrk(const char *s1, const char *s2)$/;"	f
strptime	src/time/strptime.c	/^char *strptime(const char *restrict buf, const char *restrict format, struct tm *restrict tm)$/;"	f
strrchr	src/string/strrchr.c	/^char * strrchr(const char *s, int c)$/;"	f
strspn	src/string/strspn.c	/^size_t strspn(const char *s1, const char *s2)$/;"	f
strstr	src/string/strstr.c	/^char * strstr(const char *s1, const char *s2)$/;"	f
strtod	src/stdlib/strtod.c	/^double strtod(const char * restrict nptr, char ** restrict endptr)$/;"	f
strtodf	src/math/nan.c	7;"	d	file:
strtodl	src/math/nan.c	8;"	d	file:
strtof	src/stdlib/strtof.c	/^float strtof(const char * restrict nptr, char ** restrict endptr)$/;"	f
strtoimax	src/inttypes/strtoimax.c	/^intmax_t strtoimax(const char * restrict nptr, char ** restrict endptr, int base)$/;"	f
strtok	src/string/strtok.c	/^char * strtok(char * restrict s1, const char * restrict s2)$/;"	f
strtok_s	src/string/strtok_s.c	/^char * strtok_s(char * restrict s1, rsize_t * restrict s1max, const char * restrict s2, char **restrict ptr)$/;"	f
strtol	src/stdlib/strtol.c	/^long int strtol(const char * restrict nptr, char ** restrict endptr, int base)$/;"	f
strtold	src/stdlib/strtold.c	/^long double strtold(const char * restrict nptr, char ** restrict endptr)$/;"	f
strtoll	src/stdlib/strtoll.c	/^long long int strtoll(const char * restrict nptr, char ** restrict endptr, int base)$/;"	f
strtoul	src/stdlib/strtoul.c	/^unsigned long int strtoul(const char * nptr, char ** endptr, int base)$/;"	f
strtoull	src/stdlib/strtoull.c	/^unsigned long long int strtoull(const char * restrict nptr, char ** restrict endptr, int base)$/;"	f
strtoumax	src/inttypes/strtoumax.c	/^uintmax_t strtoumax(const char *restrict nptr, char ** restrict endptr, int base)$/;"	f
strtoumax	src/stdio/__printf.c	17;"	d	file:
strxfrm	src/string/strxfrm.c	/^size_t strxfrm(char * restrict s1, const char * restrict s2, size_t n)$/;"	f
swab	src/unistd/swab.c	/^void swab(const void * restrict src, void * restrict dest, ssize_t nbytes)$/;"	f
swapcontext	src/ucontext/swapcontext.c	/^void swapcontext(ucontext_t *oucp, const ucontext_t *ucp)$/;"	f
swprintf	src/wchar/swprintf.c	/^int swprintf(wchar_t * restrict s, size_t n, const wchar_t * restrict format, ...)$/;"	f
swprintf_s	src/wchar/swprintf_s.c	/^int swprintf_s(wchar_t * restrict s, rsize_t n, const wchar_t * restrict format,$/;"	f
swscanf	src/wchar/swscanf.c	/^int swscanf(const wchar_t * restrict s, const wchar_t * restrict format, ...)$/;"	f
swscanf_s	src/wchar/swscanf_s.c	/^int swscanf_s(const wchar_t * restrict s, const wchar_t * restrict format, ...)$/;"	f
symlink	src/unistd/symlink.c	/^int symlink(const char*path1, const char *path2)$/;"	f
sync	src/unistd/sync.c	/^void sync(void)$/;"	f
sysconf	src/unistd/sysconf.c	/^long sysconf(int name)$/;"	f
syslog	src/syslog/syslog.c	/^void syslog(int priority, const char * message, ...)$/;"	f
system	src/stdlib/system.c	/^int system(const char * string)$/;"	f
tan	src/math/tan.c	/^TYPE TGFN(tan)(TYPE x)$/;"	f
tanh	src/math/tanh.c	/^TYPE TGFN(tanh)(TYPE x)$/;"	f
tcdrain	src/termios/tcdrain.c	/^int tcdrain(int fildes)$/;"	f
tcflow	src/termios/tcflow.c	/^int tcflow(int fildes, int action)$/;"	f
tcflush	src/termios/tcflush.c	/^int tcflush(int fildes, int queue_selector)$/;"	f
tcgetattr	src/termios/tcgetattr.c	/^int tcgetattr(int fildes, struct termios *termios_p)$/;"	f
tcgetpgrp	src/unistd/tcgetpgrp.c	/^pid_t tcgetpgrp(int fildes)$/;"	f
tcgetsid	src/termios/tcgetsid.c	/^pid_t tcgetsid(int fildes)$/;"	f
tcsendbreak	src/termios/tcsendbreak.c	/^int tcsendbreak(int fildes, int duration)$/;"	f
tcsetattr	src/termios/tcsetattr.c	/^int tcsetattr(int fildes, int optional_actions, struct termios *termios_p)$/;"	f
tcsetpgrp	src/unistd/tcsetpgrp.c	/^int tcsetpgrp(int fildes, pid_t pgid_id)$/;"	f
tdelete	src/search/tdelete.c	/^void *tdelete(const void * restrict key, void ** restrict rootp, int (*compar) (const void *, const void *))$/;"	f
telldir	src/dirent/telldir.c	/^long telldir(DIR * dirp)$/;"	f
tempnam	src/stdio/tempnam.c	/^char * tempnam(const char * dir, const char * pfx)$/;"	f
test_strfmon	src/monetary/test_strfmon.c	/^static void test_strfmon(const char *label, const char *fmt, int more)$/;"	f	file:
test_strfmon_once	src/monetary/test_strfmon.c	/^static void test_strfmon_once(const char *fmt, double value)$/;"	f	file:
tfind	src/search/tfind.c	/^void *tfind(const void * key, void * const * rootp, int (*compar) (const void *, const void *))$/;"	f
tgamma	src/math/tgamma.c	/^TYPE TGFN(tgamma)(TYPE x)$/;"	f
thrd_create	src/threads/thrd_create.c	/^int thrd_create(thrd_t *thr, thrd_start_t func, void *arg)$/;"	f
thrd_current	src/threads/thrd_current.c	/^thrd_t thrd_current(void)$/;"	f
thrd_detach	src/threads/thrd_detach.c	/^int thrd_detach(thrd_t thr)$/;"	f
thrd_equal	src/threads/thrd_equal.c	/^int thrd_equal(thrd_t thr0, thrd_t thr1)$/;"	f
thrd_exit	src/threads/thrd_exit.c	/^_Noreturn void thrd_exit(int res)$/;"	f
thrd_join	src/threads/thrd_join.c	/^int thrd_join(thrd_t thr, int *res)$/;"	f
thrd_sleep	src/threads/thrd_sleep.c	/^int thrd_sleep(const struct timespec *duration, struct timespec *remaining)$/;"	f
thrd_yield	src/threads/thrd_yield.c	/^void thrd_yield(void)$/;"	f
thread_local	src/threads/thread_local.c	1;"	d	file:
time	src/time/time.c	/^time_t time(time_t * timer)$/;"	f
timer_create	src/time/timer_create.c	/^int timer_create(clockid_t clockid, struct sigevent *restrict evp, timer_t *restrict timerid)$/;"	f
timer_delete	src/time/timer_delete.c	/^int timer_delete(timer_t timerid)$/;"	f
timer_getoverrun	src/time/timer_getoverrun.c	/^int timer_getoverrun(timer_t timerid)$/;"	f
timer_gettime	src/time/timer_gettime.c	/^int timer_gettime(timer_t timerid, struct itimerspec *value)$/;"	f
timer_settime	src/time/timer_settime.c	/^int timer_settime(timer_t timerid, int flags, const struct itimerspec * restrict value, struct itimerspec * restrict ovalue)$/;"	f
times	src/sys/times/times.c	/^clock_t times(struct tms *buffer)$/;"	f
timespec_get	src/time/timespec_get.c	/^int timespec_get(struct timespec *ts, int base)$/;"	f
timezone	src/time/timezone.c	/^long timezone;$/;"	v
tmpfile	src/stdio/tmpfile.c	/^FILE * tmpfile(void)$/;"	f
tmpfile_s	src/stdio/tmpfile_s.c	/^errno_t tmpfile_s(FILE * restrict * restrict streamptr)$/;"	f
tmpnam	src/stdio/tmpnam.c	/^char * tmpnam(char *s)$/;"	f
tmpnam_s	src/stdio/tmpnam_s.c	/^errno_t tmpnam_s(char *s, rsize_t maxsize)$/;"	f
tms	src/sys/times/struct_tms.c	/^struct tms {$/;"	s	file:
tms_cstime	src/sys/times/struct_tms.c	/^	clock_t tms_cstime;$/;"	m	struct:tms	file:
tms_cutime	src/sys/times/struct_tms.c	/^	clock_t tms_cutime;$/;"	m	struct:tms	file:
tms_stime	src/sys/times/struct_tms.c	/^	clock_t tms_stime;$/;"	m	struct:tms	file:
tms_utime	src/sys/times/struct_tms.c	/^	clock_t tms_utime;$/;"	m	struct:tms	file:
toascii	src/ctype/toascii.c	/^int toascii(int c)$/;"	f
tolower	src/ctype/tolower.c	/^int tolower(int c)$/;"	f
toupper	src/ctype/toupper.c	/^int toupper(int c)$/;"	f
towctrans	src/wctype/towctrans.c	/^wint_t towctrans(wint_t wc, wctrans_t desc)$/;"	f
towlower	src/wctype/towlower.c	/^wint_t towlower(wint_t wc)$/;"	f
towupper	src/wctype/towupper.c	/^wint_t towupper(wint_t wc)$/;"	f
trunc	src/math/trunc.c	/^TYPE TGFN(trunc)(TYPE x)$/;"	f
truncate	src/unistd/truncate.c	/^int truncate(const char *path, off_t length)$/;"	f
tsearch	src/search/tsearch.c	/^void *tsearch(const void * key, void ** rootp, int (*compar) (const void *, const void *))$/;"	f
tss_create	src/threads/tss_create.c	/^int tss_create(tss_t *key, tss_dtor_t dtor)$/;"	f
tss_delete	src/threads/tss_delete.c	/^void tss_delete(tss_t key)$/;"	f
tss_get	src/threads/tss_get.c	/^void *tss_get(tss_t key)$/;"	f
tss_set	src/threads/tss_set.c	/^int tss_set(tss_t key, void *val)$/;"	f
ttyname	src/unistd/ttyname.c	/^char *ttyname(int fildes)$/;"	f
ttyslot	src/stdlib/ttyslot.c	/^int ttyslot(void)$/;"	f
twalk	src/search/twalk.c	/^void twalk(const void * root, void (*action) (const void *, VISIT, int))$/;"	f
tzname	src/time/tzname.c	/^char * tzname[2];$/;"	v
tzset	src/time/tzset.c	/^void tzset(void)$/;"	f
ualarm	src/unistd/ualarm.c	/^useconds_t ualarm(useconds_t useconds, useconds_t interval)$/;"	f
ulimit	src/ulimit/ulimit.c	/^long ulimit(int cmd, ...)$/;"	f
umask	src/sys/stat/umask.c	/^mode_t umask(mode_t cmask)$/;"	f
uname	src/sys/utsname/uname.c	/^int uname(struct utsname *name)$/;"	f
ungetc	src/stdio/ungetc.c	/^int ungetc(int c, FILE *stream)$/;"	f
ungetwc	src/wchar/ungetwc.c	/^wint_t ungetwc(wint_t c, FILE * stream)$/;"	f
unlink	src/stdio/remove.c	15;"	d	file:
unlink	src/unistd/unlink.c	/^int unlink(const char *path)$/;"	f
unlockpt	src/stdlib/unlockpt.c	/^int unlockpt(int fildes)$/;"	f
usleep	src/unistd/usleep.c	/^int usleep(useconds_t useconds)$/;"	f
utimbuf	src/utime/struct_utimbuf.c	/^struct utimbuf {$/;"	s	file:
utime	src/utime/utime.c	/^int utime(const char *path, const struct utimbuf *times)$/;"	f
utimes	src/sys/time/utimes.c	/^int utimes(const char *path, const struct timeval times[2])$/;"	f
valloc	src/stdlib/valloc.c	/^void *valloc(size_t size)$/;"	f
vfork	src/unistd/vfork.c	/^pid_t vfork(void)$/;"	f
vfprintf	src/stdio/vfprintf.c	/^int vfprintf(FILE * restrict stream, const char * restrict format, va_list arg)$/;"	f
vfprintf_s	src/stdio/vfprintf_s.c	/^int vfprintf_s(FILE * restrict stream, const char * restrict format, va_list arg)$/;"	f
vfscanf	src/stdio/vfscanf.c	/^int vfscanf(FILE * restrict stream, const char * restrict format, va_list arg)$/;"	f
vfscanf_s	src/stdio/vfscanf_s.c	/^int vfscanf_s(FILE * restrict stream, const char * restrict format, va_list arg)$/;"	f
vfwprintf	src/wchar/vfwprintf.c	/^int vfwprintf(FILE * restrict stream, const wchar_t * restrict format, va_list arg)$/;"	f
vfwprintf_s	src/wchar/vfwprintf_s.c	/^int vfwprintf_s(FILE * restrict stream, const wchar_t * restrict format, va_list arg)$/;"	f
vfwscanf	src/wchar/fwscanf.c	6;"	d	file:
vfwscanf	src/wchar/vfwscanf.c	/^int vfwscanf(FILE * restrict stream, const wchar_t * restrict format, va_list arg)$/;"	f	file:
vfwscanf_s	src/wchar/vfwscanf_s.c	/^int vfwscanf_s(FILE * restrict stream, const wchar_t * restrict format, va_list arg)$/;"	f
vprintf	src/stdio/vprintf.c	/^int vprintf(const char * restrict format, va_list arg)$/;"	f
vprintf_s	src/stdio/vprintf_s.c	/^int vprintf_s(const char * restrict format, va_list arg)$/;"	f
vscanf	src/stdio/vscanf.c	/^int vscanf(const char * restrict format, va_list arg)$/;"	f
vscanf_s	src/stdio/vscanf_s.c	/^int vscanf_s(const char * restrict format, va_list arg)$/;"	f
vsnprintf	src/stdio/vsnprintf.c	/^int vsnprintf(char * restrict s, size_t n, const char *format, va_list arg)$/;"	f
vsnprintf_s	src/stdio/vsnprintf_s.c	/^int vsnprintf_s(char * restrict s, rsize_t n, const char * restrict format, va_list arg)$/;"	f
vsnwprintf_s	src/wchar/vsnwprintf_s.c	/^int vsnwprintf_s(whcar_t * restrict s, rsize_t n, const wchar_t * restrict format, va_list arg)$/;"	f
vsprintf	src/stdio/vsprintf.c	/^int vsprintf(char *s, const char *format, va_list arg)$/;"	f
vsprintf_s	src/stdio/vsprintf_s.c	/^int vsprintf_s(char *s, rsize_t n, const char *format, va_list arg)$/;"	f
vsscanf	src/stdio/vsscanf.c	/^int vsscanf(const char * restrict s, const char * restrict format, va_list arg)$/;"	f
vsscanf_s	src/stdio/vsscanf_s.c	/^int vsscanf_s(const char * restrict s, const char * restrict format, va_list arg)$/;"	f
vswprintf	src/wchar/vswprintf.c	/^int vswprintf(wchar_t * restrict s, size_t n, const wchar_t * restrict format, va_list arg)$/;"	f
vswprintf_s	src/wchar/vswprintf_s.c	/^int vswprintf_s(wchar_t * restrict s, rsize_t n, const wchar_t * restrict format, va_list arg)$/;"	f
vswscanf	src/wchar/swscanf.c	5;"	d	file:
vswscanf	src/wchar/vswscanf.c	/^int vswscanf(const wchar_t * restrict s, const wchar_t * restrict format, va_list arg)$/;"	f	file:
vswscanf_s	src/wchar/vswscanf_s.c	/^int vswscanf_s(const wchar_t * restrict s, const wchar_t * restrict format, va_list arg)$/;"	f
vwprintf	src/wchar/vwprintf.c	/^int vwprintf(const wchar_t * restrict format, va_list arg)$/;"	f
vwprintf_s	src/wchar/vwprintf_s.c	/^int vwprintf_s(const wchar_t * restrict format, va_list arg)$/;"	f
vwscanf	src/wchar/vwscanf.c	/^int vwscanf(const wchar_t * restrict format, va_list arg)$/;"	f
vwscanf_s	src/wchar/vwscanf_s.c	/^int vwscanf_s(const wchar_t * restrict format, va_list arg)$/;"	f
wait	src/sys/wait/wait.c	/^pid_t wait(int *stat_loc)$/;"	f
wait3	src/sys/wait/wait3.c	/^pid_t wait3(int *stat_loc, int options, struct rusage *resource_usage)$/;"	f
waitid	src/sys/wait/waitid.c	/^int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options)$/;"	f
waitid	src/sys/wait/waitpid.c	15;"	d	file:
waitpid	src/sys/wait/waitpid.c	/^pid_t waitpid(pid_t pid, int *stat_loc, int options)$/;"	f
wcrtomb	src/wchar/wcrtomb.c	/^size_t wcrtomb(char * restrict s, wchar_t wc, mbstate_t * restrict ps)$/;"	f
wcrtomb_s	src/wchar/wcrtomb_s.c	/^errno_t wcrtomb_s(size_t * restrict retval, char * restrict s, rsize_t smax,$/;"	f
wcscat	src/wchar/wcscat.c	/^wchar_t * wcscat(wchar_t * restrict s1, const wchar_t * restrict s2)$/;"	f
wcscat_s	src/wchar/wcscat_s.c	/^errno_t wcscat_s(wchar_t * restrict s1, rsize_t s1max, const wchar_t * restrict s2)$/;"	f
wcschr	src/wchar/wcschr.c	/^wchar_t * wcschr(const wchar_t * s, wchar_t c)$/;"	f
wcscmp	src/wchar/wcscmp.c	/^int wcscmp(const wchar_t * s1, const wchar_t * s2)$/;"	f
wcscoll	src/wchar/wcscoll.c	/^int wcscoll(const wchar_t * s1, const wchar_t * s2)$/;"	f
wcscpy	src/wchar/wcscpy.c	/^wchar_t * wcscpy(wchar_t * restrict s1, const wchar_t * restrict s2)$/;"	f
wcscpy_s	src/wchar/wcscpy_s.c	/^errno_t wcscpy_s(wchar_t * restrict s1, rsize_t s1max, const wchar_t * restrict s2)$/;"	f
wcscspn	src/wchar/wcscspn.c	/^size_t wcscspn(const wchar_t * s1, const wchar_t * s2)$/;"	f
wcsftime	src/wchar/wcsftime.c	/^size_t wcsftime(wchar_t * restrict s, size_t maxsize, const wchar_t * restrict format, const struct tm * restrict timeptr)$/;"	f
wcslen	src/wchar/wcslen.c	/^size_t wcslen(const wchar_t * s)$/;"	f
wcsncat	src/wchar/wcsncat.c	/^wchar_t * wcsncat(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)$/;"	f
wcsncat_s	src/wchar/wcsncat_s.c	/^errno_t wcsncat_s(wchar_t * restrict s1, rsize_t s1max, const wchar_t * restrict s2, rsize_t n)$/;"	f
wcsncmp	src/wchar/wcsncmp.c	/^int wcsncmp(const wchar_t * s1, const wchar_t * s2, size_t n)$/;"	f
wcsncpy	src/wchar/wcsncpy.c	/^wchar_t * wcsncpy(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)$/;"	f
wcsncpy_s	src/wchar/wcsncpy_s.c	/^errno_t wcsncpy_s(wchar_t * restrict s1, rsize_t s1max, const wchar_t * restrict s2, rsize_t n)$/;"	f
wcsnlen_s	src/wchar/wcsnlen_s.c	/^size_t wcsnlen_s( const wchar_t *ws, size_t maxlen)$/;"	f
wcspbrk	src/wchar/wcspbrk.c	/^wchar_t * wcspbrk(const wchar_t * s1, const wchar_t * s2)$/;"	f
wcsrchr	src/wchar/wcsrchr.c	/^wchar_t * wcsrchr(const wchar_t * s, wchar_t c)$/;"	f
wcsrtombs	src/wchar/wcsrtombs.c	/^size_t wcsrtombs(char * restrict dst, const wchar_t ** restrict src, size_t len, mbstate_t * restrict ps)$/;"	f
wcsrtombs_s	src/wchar/wcsrtombs_s.c	/^errno_t wcsrtombs_s(size_t * restrict retval,$/;"	f
wcsspn	src/wchar/wcsspn.c	/^size_t wcsspn(const wchar_t * s1, const wchar_t * s2)$/;"	f
wcsstr	src/wchar/wcsstr.c	/^wchar_t * wcsstr(const wchar_t * s1, const wchar_t * s2)$/;"	f
wcsstr	src/wchar/wcswcs.c	7;"	d	file:
wcstod	src/wchar/wcstod.c	/^double wcstod(const wchar_t * restrict nptr, wchar_t ** restrict endptr)$/;"	f
wcstof	src/wchar/wcstof.c	/^float wcstof(const wchar_t * restrict nptr, wchar_t ** restrict endptr)$/;"	f
wcstoimax	src/inttypes/wcstoimax.c	/^intmax_t wcstoimax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)$/;"	f
wcstok	src/wchar/wcstok.c	/^wchar_t * wcstok(wchar_t * restrict s1, const wchar_t * restrict s2, wchar_t ** restrict ptr)$/;"	f
wcstok_s	src/wchar/wcstok_s.c	/^wchar_t *wcstok_s(wchar_t * restrict s1, rsize_t * restrict s1max,$/;"	f
wcstol	src/wchar/wcstol.c	/^long int wcstol(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)$/;"	f
wcstold	src/wchar/wcstold.c	/^long double wcstold(const wchar_t * restrict nptr, wchar_t ** restrict endptr)$/;"	f
wcstoll	src/wchar/wcstoll.c	/^long long int wcstoll(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)$/;"	f
wcstombs	src/stdlib/wcstombs.c	/^size_t wcstombs(char * restrict s, const wchar_t * restrict pwcs, size_t n)$/;"	f
wcstombs_s	src/stdlib/wcstombs_s.c	/^errno_t wcstombs_s(size_t * restrict retval, char * restrict dst, rsize_t dstmax, const wchar_t * restrict src, rsize_t len)$/;"	f
wcstoul	src/wchar/wcstoul.c	/^unsigned long int wcstoul(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)$/;"	f
wcstoull	src/wchar/wcstoull.c	/^unsigned long long int wcstoull(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)$/;"	f
wcstoumax	src/inttypes/wcstoumax.c	/^uintmax_t wcstoumax(const wchar_t * restrict nptr, wchar_t ** restrict endptr, int base)$/;"	f
wcswcs	src/wchar/wcswcs.c	/^wchar_t * wcswcs(const wchar_t * s1, const wchar_t * s2)$/;"	f
wcswidth	src/wchar/wcswidth.c	/^int wcswidth(const wchar_t * wcsptr, size_t n)$/;"	f
wcsxfrm	src/wchar/wcsxfrm.c	/^size_t wcsxfrm(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)$/;"	f
wctob	src/wchar/wctob.c	/^int wctob(wint_t c)$/;"	f
wctomb	src/stdlib/wctomb.c	/^int wctomb(char * s, wchar_t wchar)$/;"	f
wctomb_s	src/stdlib/wctomb_s.c	/^errno_t wctomb_s(int * restrict status, char * restrict s, rsize_t smax, wchar_t wc)$/;"	f
wctrans	src/wctype/wctrans.c	/^wctrans_t wctrans(const char * property)$/;"	f
wctype	src/wctype/wctype.c	/^wctype_t wctype(const char * property)$/;"	f
wcwidth	src/wchar/wcwidth.c	/^int wcwidth(wchar_t wc)$/;"	f
wmemchr	src/wchar/wmemchr.c	/^wchar_t * wmemchr(const wchar_t * s, wchar_t c, size_t n)$/;"	f
wmemcmp	src/wchar/wmemcmp.c	/^int wmemcmp(const wchar_t * s1, const wchar_t * s2, size_t n)$/;"	f
wmemcpy	src/wchar/wmemcpy.c	/^wchar_t * wmemcpy(wchar_t * restrict s1, const wchar_t * restrict s2, size_t n)$/;"	f
wmemcpy_s	src/wchar/wmemcpy_s.c	/^errno_t wmemcpy_s(wchar_t * restrict s1, rsize_t s1max, const wchar_t * restrict s2, rsize_t n)$/;"	f
wmemmove	src/wchar/wmemmove.c	/^wchar_t * wmemmove(wchar_t * s1, const wchar_t * s2, size_t n)$/;"	f
wmemmove_s	src/wchar/wmemmove_s.c	/^errno_t wmemmove_s(whcar_t *s1, rsize_t s1max, const wchar_t *s2, rsize_t n)$/;"	f
wmemset	src/wchar/wmemset.c	/^wchar_t * wmemset(wchar_t * s, wchar_t c, size_t n)$/;"	f
wordexp	src/wordexp/wordexp.c	/^int wordexp(const char *restrict words, wordexp_t *restrict pwordexp, int flags)$/;"	f
wordfree	src/wordexp/wordfree.c	/^void wordfree(wordexp_t *pwordexp)$/;"	f
wprintf	src/wchar/wprintf.c	/^int wprintf(const wchar_t * restrict format, ...)$/;"	f
wprintf_s	src/wchar/wprintf_s.c	/^int wprintf_s(const wchar_t * restrict format, ...)$/;"	f
write	src/stdio/__printf.c	22;"	d	file:
write	src/stdio/__printf.c	23;"	d	file:
write	src/stdio/fflush.c	13;"	d	file:
write	src/stdio/putc_unlocked.c	10;"	d	file:
write	src/unistd/write.c	/^ssize_t write(int fildes, const void *buf, size_t nbyte)$/;"	f
writev	src/sys/uio/writev.c	/^ssize_t writev(int fildes, const struct iovec * iov, int iovcnt)$/;"	f
wscanf	src/wchar/wscanf.c	/^int wscanf(const wchar_t * restrict format, ...)$/;"	f
wscanf_s	src/wchar/wscanf_s.c	/^int wscanf_s(const wchar_t * restrict format, ...)$/;"	f
y0	src/math/y0.c	/^double y0(double x)$/;"	f
y1	src/math/y1.c	/^double y1(double x)$/;"	f
yn	src/math/yn.c	/^double yn(int n, double x)$/;"	f
